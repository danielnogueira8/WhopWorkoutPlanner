"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Ok: function() {
        return Ok;
    },
    Err: function() {
        return Err;
    },
    Result: function() {
        return Result;
    },
    default: function() {
        return _default;
    }
});
function ResultFrom({ data, error, ...constant }) {
    if (data) {
        return Ok(data, constant);
    }
    if (error) {
        return Err(error, constant);
    }
    throw new Error("Invalid result data. Neither data nor error was provided.");
}
function ResultAll(...results) {
    const r = [];
    for (const result of results){
        if (result.error) {
            return result;
        }
        r.push(result.unwrap());
    }
    return Ok(r);
}
function Ok(data, common) {
    const base = common ?? {};
    return {
        ...base,
        status: "ok",
        data,
        error: undefined,
        isOk: true,
        isErr: false,
        unwrap: ()=>data,
        or: ()=>data,
        orElse: ()=>data,
        mapOk: (fn)=>Ok(fn(data), base),
        mapErr: ()=>Ok(data, base),
        map: (fns)=>fns.ok(data),
        and: (fn)=>fn(data),
        andPromise: async (fn)=>fn(data),
        toJSON: ()=>({
                data,
                error: undefined,
                status: "ok",
                ...base
            }),
        toResponse: _toResponse({
            data,
            error: undefined,
            status: "ok",
            ...base
        })
    };
}
function Err(error, common) {
    const base = common ?? {};
    return {
        ...base,
        data: undefined,
        status: "error",
        error,
        isOk: false,
        isErr: true,
        unwrap: ()=>{
            throw error;
        },
        or: (defaultValue)=>defaultValue,
        orElse: (defaultValueFn)=>defaultValueFn(error),
        mapOk: ()=>Err(error, base),
        mapErr: (fn)=>Err(fn(error), base),
        map: (fns)=>fns.err(error),
        and: ()=>Err(error, base),
        andPromise: async ()=>Err(error, base),
        toJSON: ()=>({
                data: undefined,
                error,
                status: "error",
                ...base
            }),
        toResponse: _toResponse({
            data: undefined,
            error,
            status: "error",
            ...base
        })
    };
}
function _toResponse(data) {
    return (opts)=>{
        const body = JSON.stringify(data);
        const headers = new Headers(opts?.headers);
        headers.set("Content-Type", "application/json");
        return new Response(body, {
            ...opts,
            headers
        });
    };
}
const Result = {
    Ok,
    Err,
    // promise: FromPromise,
    // safe: SafePromise,
    from: ResultFrom,
    all: ResultAll
};
const _default = Result;
