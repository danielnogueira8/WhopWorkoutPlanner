"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WhopEnv: function() {
        return WhopEnv;
    },
    WhopEnvStore: function() {
        return WhopEnvStore;
    }
});
var WhopEnv;
(function(WhopEnv) {
    WhopEnv["JWK_PK"] = "JWK_PK";
    WhopEnv["API_KEY"] = "API_KEY";
    WhopEnv["COMPANY_API_KEY"] = "COMPANY_API_KEY";
    WhopEnv["WEBHOOK_KEY"] = "WEBHOOK_KEY";
    WhopEnv["APP_ID"] = "APP_ID";
})(WhopEnv || (WhopEnv = {}));
const _default_env = {
    [WhopEnv.JWK_PK]: '{"kty":"EC","x":"rz8a8vxvexHC0TLT91g7llOdDOsNuYiGEfic4Qhni-E","y":"zH0QblKYToexd5PEIMGXPVJS9AB5smKrW4S_TbiXrOs","crv":"P-256"}'
};
const _env = {
    ..._default_env,
    [WhopEnv.API_KEY]: null,
    [WhopEnv.COMPANY_API_KEY]: null,
    [WhopEnv.APP_ID]: null,
    [WhopEnv.WEBHOOK_KEY]: null
};
const envVarNames = {
    API_KEY: "WHOP_API_KEY",
    COMPANY_API_KEY: "WHOP_COMPANY_API_KEY",
    APP_ID: "NEXT_PUBLIC_WHOP_APP_ID",
    JWK_PK: "WHOP_JWK_PK",
    WEBHOOK_KEY: "WHOP_WEBHOOK_KEY"
};
function initializeFromEnv() {
    try {
        const envVars = {
            [WhopEnv.API_KEY]: process.env.WHOP_API_KEY,
            [WhopEnv.COMPANY_API_KEY]: process.env.WHOP_COMPANY_API_KEY,
            [WhopEnv.APP_ID]: process.env.NEXT_PUBLIC_WHOP_APP_ID,
            [WhopEnv.WEBHOOK_KEY]: process.env.WHOP_WEBHOOK_KEY,
            [WhopEnv.JWK_PK]: process.env.WHOP_JWK_PK || _default_env[WhopEnv.JWK_PK]
        };
        set(envVars);
    } catch  {
    // empty - dont kill process
    }
}
initializeFromEnv();
function set(env) {
    Object.assign(_env, env);
}
function get(key, defaultValue) {
    const value = _env[key] ?? defaultValue;
    if (!value) {
        if (typeof window !== "undefined" && !envVarNames[key].startsWith("NEXT_PUBLIC")) {
            throw new Error(`Variable ${key} not found. You are trying to access this variable on the client and it is not public which is not allowed.`);
        }
        throw new Error(`Variable ${key} not found. Please make sure you have set the environment variable ${envVarNames[key]}.`);
    }
    return value;
}
function tryGet(key, defaultValue) {
    const value = _env[key] ?? defaultValue;
    return value;
}
const WhopEnvStore = {
    get,
    set,
    tryGet
};
