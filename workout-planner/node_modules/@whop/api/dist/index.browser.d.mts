import { W as WhopClientSdkOptions, A as AttachableRecords, U as UploadFileOptions, a as UploadAttachmentResponse, E as Exact, S as Scalars, b as WithError, G as GetAttachmentQuery, c as AnalyzeAttachmentInput, P as ProcessAttachmentMutation, D as DirectUploadInput, d as UploadMediaMutation, e as WebsocketClientOptionsClient, f as WhopWebsocketClientBrowser, g as GetAccessPassQuery, h as GetCompanyQuery, C as CreateAssessmentQuestionInput, i as CreateAssessmentQuestionMutation, j as CreateChapterInput, k as CreateChapterMutation, l as CreateCourseInput, m as CreateCourseMutation, n as CreateLessonInput, o as CreateLessonMutation, p as DeleteAssessmentQuestionImageInput, q as DeleteAssessmentQuestionImageMutation, r as DeleteChapterInput, s as DeleteChapterMutation, t as DeleteLessonAttachmentInput, u as DeleteLessonAttachmentMutation, v as DeleteLessonInput, w as DeleteLessonMutation, x as GetCourseQuery, y as GetLessonQuery, z as GetUserLessonInteractionsQuery, I as InputMaybe, L as ListCoursesForCompanyQuery, B as ListCoursesForExperienceQuery, M as MarkLessonAsCompletedInput, F as MarkLessonAsCompletedMutation, H as MoveCourseInput, J as MoveCourseMutation, K as UpdateChapterOrderInput, N as UpdateChapterOrderMutation, O as UpdateChapterInput, Q as UpdateChapterMutation, R as UpdateLessonOrderInput, T as UpdateLessonOrderMutation, V as UpdateLessonInput, X as UpdateLessonMutation, Y as GetExperienceQuery, Z as Direction, _ as ListUsersForExperienceQuery, $ as ListForumPostsFromForumQuery, a0 as ListMessagesFromChatQuery, a1 as GetCurrentUserQuery, a2 as GetUserLedgerAccountQuery, a3 as GetUserQuery, a4 as WhopServerSdkOptions, a5 as WhopServerSdk$1 } from './client-sdk-shared-CwmY1-gp.mjs';
export { ay as AbuseReportCategoryResourceTypes, az as AbuseReportCategoryVisibility, aA as AbuseReportStatus, aB as AcceptedPaymentMethods, aC as AccessLevel, aD as AccessPassAffiliateOrder, aE as AccessPassAffiliateStatuses, aF as AccessPassAttachmentCategories, aG as AccessPassConditions, aH as AccessPassFilters, h3 as AccessPassFragmentFragment, aI as AccessPassOnboardingVersionTypes, aJ as AccessPassOrder, aK as AccessPassProductHighlightInput, aL as AccessPassSocialLinkInput, aM as AccessPassTypes, aN as AccessPassesSortableColumns, aO as AffiliatePayoutTypes, aP as AffiliatePlansSortableColumns, aQ as AffiliateReferralLogFilters, aR as AffiliateReferralLogsSortableColumns, aS as AffiliateTypes, h6 as AffiliateWithUserFragment, aT as AffiliatesSortableColumns, aU as AnalyzeAttachmentInput, aV as ApiKeyPermissions, aW as ApiVersion, aX as AppBuildPlatforms, aY as AppBuildStatuses, aZ as AppImageStyles, a_ as AppRequestedPermissionInput, a$ as AppStatuses, b0 as AppValidScopes, b1 as AppViewTypes, b2 as ApplicationCriteriaIdentifier, b3 as AttachableRecords, hc as AttachmentFragment, b4 as AttachmentInput, b5 as AuditLogsSortableColumns, b6 as AuthenticationMethods, b7 as AuthorizationResourceTypes, b8 as AuthorizedUserRoles, b9 as AutomatedMessagesTriggerCategories, ba as AvatarImageStyles, bb as BalanceReservationReservationTypes, bc as BanReasons, bd as BanUserInput, jX as BanUserMutation, jW as BanUserMutationVariables, h4 as BaseAccessPassFragment, h5 as BaseAffiliateFragment, ha as BaseAppAgentUserFragment, h9 as BaseAppApiKeyFragment, h7 as BaseAppBuildFragment, h8 as BaseAppFragment, hb as BaseAppStatsFragment, hd as BaseAuthorizedUserFragment, hv as BaseCompanyMemberFragment, he as BaseInvoiceFragment, hf as BaseLedgerAccountFragment, hh as BasePlanFragment, hx as BasePromoCodeFragment, hg as BasePublicPlanFragment, hk as BasePublicProfileUserFragment, hy as BasePublicPromoCodeFragment, hi as BaseReceiptFragment, hj as BaseUserFragment, hz as BaseWebhookFragment, hm as BasicCourseChapterFragment, hl as BasicCourseFragment, hn as BasicCourseLessonFragment, be as BillingReasons, bf as BnplProvider, bg as BountyFilters, bh as BusinessActivityEventTypes, bi as BusinessAffiliateImageStyles, bj as BusinessTypes, bk as BuyerFeeMode, bl as CancelOptions, bm as CaseStates, bn as ChangeCardMyMembershipInput, bo as ChargeCardFunding, bp as ChargeOutcomeRiskLevels, bq as ChargeUserInput, jH as ChargeUserMutation, jG as ChargeUserMutationVariables, br as ChargeUserResponseStatus, bs as ChartIntervals, bt as ChatFeedInput, hJ as CheckIfUserHasAccessToAccessPassQuery, hI as CheckIfUserHasAccessToAccessPassQueryVariables, hL as CheckIfUserHasAccessToCompanyQuery, hK as CheckIfUserHasAccessToCompanyQueryVariables, hN as CheckIfUserHasAccessToExperienceQuery, hM as CheckIfUserHasAccessToExperienceQueryVariables, bu as CheckoutSessionTypes, bv as CoinbaseCommerceStatuses, bw as CompaniesOrder, bx as CompanyAttachmentCategories, ho as CompanyFragmentFragment, by as CompanyImageStyles, bz as CompanyOnboardingPlanOptions, bA as CompanyTypes, bB as CompetitionMetricTypes, bC as CompetitionPrizeTypes, bD as ConnectedAccountStatuses, bE as ConnectedAccountTypes, bF as ContentRewardsCampaignOrder, bG as ContentRewardsCampaignStatus, bH as ContentRewardsCampaignsFilters, bI as ContentRewardsCategory, bJ as ContentRewardsContentType, bK as ContentRewardsPlatform, bL as ContentRewardsPublicCampaignOrder, bM as ContentRewardsPublicCampaignsFilters, bN as ContentRewardsSubmissionAnalysisResults, bO as ContentRewardsSubmissionFlagReasons, bP as ContentRewardsSubmissionStatus, bQ as ContentRewardsSubmissionViewsChartConfigInput, bR as ContentRewardsSubmissionsFilters, bS as ContentRewardsSubmissionsOrder, bT as ContentRewardsSubmissionsSortableColumns, bU as ContentRewardsViewsChartConfigInput, hu as CourseAssessmentQuestionFragment, ht as CourseMuxAssetFragment, bV as CoursesAssessmentQuestionTypes, bW as CreateAccessPassInput, hB as CreateAccessPassMutation, hA as CreateAccessPassMutationVariables, bX as CreateAffiliateInput, hP as CreateAffiliateMutation, hO as CreateAffiliateMutationVariables, bY as CreateAgentUserInput, bZ as CreateAppBuildInput, hX as CreateAppBuildMutation, hW as CreateAppBuildMutationVariables, b_ as CreateAppInput, hZ as CreateAppMutation, hY as CreateAppMutationVariables, b$ as CreateAssessmentQuestionInput, iB as CreateAssessmentQuestionMutation, iA as CreateAssessmentQuestionMutationVariables, c0 as CreateChapterInput, iD as CreateChapterMutation, iC as CreateChapterMutationVariables, c1 as CreateChatInput, c2 as CreateCheckoutSessionInput, jJ as CreateCheckoutSessionMutation, jI as CreateCheckoutSessionMutationVariables, c3 as CreateCompanyMutedUserInput, c4 as CreateCourseInput, iF as CreateCourseMutation, iE as CreateCourseMutationVariables, c5 as CreateForumInput, c6 as CreateForumPostInput, jj as CreateForumPostMutation, ji as CreateForumPostMutationVariables, c7 as CreateInvoiceInput, jp as CreateInvoiceMutation, jo as CreateInvoiceMutationVariables, c8 as CreateLessonInput, iH as CreateLessonMutation, iG as CreateLessonMutationVariables, c9 as CreatePromoCodeInput, jP as CreatePromoCodeMutation, jO as CreatePromoCodeMutationVariables, ca as CreateWebhookInput, kb as CreateWebhookMutation, ka as CreateWebhookMutationVariables, cb as CreatorDashboardCancelationDiscounts, cc as CreatorDashboardChartConfigInput, cd as CreatorDashboardChartIntervals, ce as CreditTransactionActivityTypes, cf as CreditTransactionFilters, cg as CreditTransactionStatuses, ch as CreditTransactionTransferReasons, ci as CreditTransactionTransferStatuses, cj as CreditTransactionTransferTypes, ck as CreditTransactionTransfersSortableColumns, cl as CryptoWalletNetworks, cm as Currencies, cn as CustomCtas, co as CustomFieldInput, cp as CustomFieldTypes, cq as DeleteAccessPassInput, hD as DeleteAccessPassMutation, hC as DeleteAccessPassMutationVariables, cr as DeleteAssessmentQuestionImageInput, iJ as DeleteAssessmentQuestionImageMutation, iI as DeleteAssessmentQuestionImageMutationVariables, cs as DeleteChapterInput, iL as DeleteChapterMutation, iK as DeleteChapterMutationVariables, ct as DeleteCompanyMutedUserInput, cu as DeleteLessonAttachmentInput, iN as DeleteLessonAttachmentMutation, iM as DeleteLessonAttachmentMutationVariables, cv as DeleteLessonInput, iP as DeleteLessonMutation, iO as DeleteLessonMutationVariables, cw as DeletePromoCodeInput, jR as DeletePromoCodeMutation, jQ as DeletePromoCodeMutationVariables, cx as DeleteWebhookInput, kd as DeleteWebhookMutation, kc as DeleteWebhookMutationVariables, cy as Device, cz as DirectMessageStatus, cA as DirectUploadInput, cB as Direction, cC as DiscordAccountImageStyles, cD as DiscoverStatuses, cE as DisputeRiskLevels, cF as DisputeStatuses, ac as DisputeWebhookData, cG as DisputesSortableColumns, cH as DmsChannelsSortTypes, cI as DmsFeedInput, cJ as DmsFeedMemberInput, cK as DmsFeedMemberNotificationPreferences, cL as DmsFeedMemberStatuses, cM as DmsFeedTypes, cN as DmsPostInput, cO as DmsPostTypes, cP as EarningsReportPeriods, cQ as EarningsTypes, cR as EntityTypes, cS as EntriesFiltersInput, cT as EntriesSortableColumns, cU as EntryFilters, cV as EntryOrder, cW as EntryStatus, cX as EntryTypes, as as Exact, cY as ExperienceAccessLevels, cZ as ExperienceActivityCardTypes, c_ as ExperienceFilters, hp as ExperienceFragmentFragment, c$ as ExperienceLinkModes, d0 as ExperienceTypes, d1 as FeedTypes, d2 as FileAttachmentInput, d3 as FileAttachmentModerationResultsTypes, d4 as FileAttachmentTypes, jv as FindOrCreateChatMutation, ju as FindOrCreateChatMutationVariables, jl as FindOrCreateForumMutation, jk as FindOrCreateForumMutationVariables, d5 as FlashSaleDurations, d6 as FlashSaleStatuses, d7 as ForumEmailNotificationPreferences, d8 as ForumLayoutTypes, hr as ForumPostFragmentFragment, d9 as ForumPostTypes, da as ForumWhoCanCommentTypes, db as ForumWhoCanPostTypes, dc as FriendlyReceiptStatus, hs as FullCourseLessonFragment, dd as GatewayTypes, hF as GetAccessPassQuery, hE as GetAccessPassQueryVariables, hR as GetAffiliateQuery, hQ as GetAffiliateQueryVariables, h$ as GetAppQuery, h_ as GetAppQueryVariables, ib as GetAttachmentQuery, ia as GetAttachmentQueryVariables, ii as GetCompanyLedgerAccountQuery, ih as GetCompanyLedgerAccountQueryVariables, ik as GetCompanyQuery, ij as GetCompanyQueryVariables, iR as GetCourseQuery, iQ as GetCourseQueryVariables, jZ as GetCurrentUserQuery, jY as GetCurrentUserQueryVariables, jb as GetExperienceQuery, ja as GetExperienceQueryVariables, jr as GetInvoiceQuery, jq as GetInvoiceQueryVariables, iT as GetLessonQuery, iS as GetLessonQueryVariables, im as GetMemberQuery, il as GetMemberQueryVariables, jT as GetPromoCodeQuery, jS as GetPromoCodeQueryVariables, j$ as GetUserLedgerAccountQuery, j_ as GetUserLedgerAccountQueryVariables, iV as GetUserLessonInteractionsQuery, iU as GetUserLessonInteractionsQueryVariables, k1 as GetUserQuery, k0 as GetUserQueryVariables, kf as GetWebhookQuery, ke as GetWebhookQueryVariables, de as GifInput, df as GifProviders, dg as GlobalAffiliateStatuses, dh as HubMembershipStatus, di as ImageAttachmentVariants, dj as ImageExtensions, dk as ImageImageStyles, aw as Incremental, dl as IndustryTypes, dm as InformationRequestItemCollectionType, dn as InformationRequestItemTextFormat, dp as InformationRequestStatus, ar as InputMaybe, dq as InstantPayoutErrorCodes, dr as InvoiceAccessPassInput, ds as InvoiceCollectionMethods, dt as InvoicePlanInput, du as InvoiceStatuses, dv as InvoicesFiltersInput, dw as InvoicesSortableColumns, dx as ItemOrderingOrderTypes, dy as Languages, dz as LeaderboardTypes, dA as LeadsSortableColumns, dB as LedgerAccountAuditStatuses, dC as LedgerAccountStandings, dD as LedgerTypes, dE as LedgerWithdrawalFrequencies, dF as LedgerWithdrawalStatuses, dG as LessonTypes, dH as LessonVisibilities, dI as LikedDiscoverAccessPassesOrder, dJ as LinkEmbedInput, jd as ListAccessPassesForExperienceQuery, jc as ListAccessPassesForExperienceQueryVariables, ip as ListAccessPassesQuery, io as ListAccessPassesQueryVariables, hT as ListAffiliatesQuery, hS as ListAffiliatesQueryVariables, i1 as ListAppsQuery, i0 as ListAppsQueryVariables, ir as ListAuthorizedUsersQuery, iq as ListAuthorizedUsersQueryVariables, iX as ListCoursesForCompanyQuery, iW as ListCoursesForCompanyQueryVariables, iZ as ListCoursesForExperienceQuery, iY as ListCoursesForExperienceQueryVariables, jx as ListDirectMessageConversationsQuery, jw as ListDirectMessageConversationsQueryVariables, jf as ListExperiencesQuery, je as ListExperiencesQueryVariables, jn as ListForumPostsFromForumQuery, jm as ListForumPostsFromForumQueryVariables, jt as ListInvoicesQuery, js as ListInvoicesQueryVariables, it as ListMembersQuery, is as ListMembersQueryVariables, iv as ListMembershipsQuery, iu as ListMembershipsQueryVariables, jz as ListMessagesFromChatQuery, jy as ListMessagesFromChatQueryVariables, ix as ListPlansQuery, iw as ListPlansQueryVariables, jV as ListPromoCodesQuery, jU as ListPromoCodesQueryVariables, jL as ListReceiptsForCompanyQuery, jK as ListReceiptsForCompanyQueryVariables, k3 as ListUserSocialsQuery, k2 as ListUserSocialsQueryVariables, jh as ListUsersForExperienceQuery, jg as ListUsersForExperienceQueryVariables, iz as ListWaitlistEntriesQuery, iy as ListWaitlistEntriesQueryVariables, kh as ListWebhooksQuery, kg as ListWebhooksQueryVariables, dK as LivestreamDestination, dL as LivestreamFeedInput, dM as LivestreamRecordingStatus, dN as LivestreamWhoCanPostTypes, dO as LivestreamWhoCanReactTypes, dP as MadeForYouPlanFilters, av as MakeEmpty, au as MakeMaybe, at as MakeOptional, dQ as ManagementItems, dR as MarkLessonAsCompletedInput, i$ as MarkLessonAsCompletedMutation, i_ as MarkLessonAsCompletedMutationVariables, dS as MarketplaceCategoryOrder, dT as MarketplaceCategoryTypes, dU as MarketplaceStatuses, aq as Maybe, dV as Media, dW as MemberMostRecentActions, dX as MemberStatuses, dY as MemberSubtextTypes, dZ as MembersFiltersInput, d_ as MembersSortableColumns, d$ as MembershipActions, e0 as MembershipHeaderStatus, e1 as MembershipImageStyles, e2 as MembershipPaymentProcessor, e3 as MembershipPushNotification, e4 as MembershipStatus, ad as MembershipWebhookData, e5 as MembershipsFiltersInput, e6 as MembershipsSortableColumns, hw as MessageFragment, e7 as ModerationResults, e8 as MoveCourseInput, j1 as MoveCourseMutation, j0 as MoveCourseMutationVariables, k5 as MuteUserMutation, k4 as MuteUserMutationVariables, e9 as MutedUserInput, ea as MuxAssetStatuses, eb as NormalizedAccountTypes, ec as NotificationPreferenceChannel, ed as NotificationPreferencesFilters, ee as NotificationPreferencesFiltersV3, ef as NotificationTopicStatus, eg as NotificationTopicTypes, eh as NotificationTopicVisibility, ei as NotificationsV4Filters, ej as NotificationsV4Pagination, ek as OnboardingProviders, el as OnboardingTypes, em as OpengraphImageVariants, jN as PayUserMutation, jM as PayUserMutationVariables, en as PaymentAccountAccountTypes, eo as PaymentAccountActionBanners, ep as PaymentAccountProviders, eq as PaymentAccountStatuses, er as PaymentMethods, es as PaymentProcessor, et as PaymentProviders, eu as PaymentTransactionProviders, ev as PaymentTransactionStatuses, ew as PaymentTransactionTypes, ae as PaymentWebhookData, ex as PaymentsApprovalStatuses, ey as PayoutAccountProviders, ez as PayoutAccountStatuses, eA as PayoutDeliveryTypes, eB as PayoutDestinationPlatformStatuses, eC as PayoutDestinationProviders, eD as PayoutDestinationStatuses, eE as PayoutDestinationTypes, eF as PayoutErrorCodes, eG as PayoutIntervals, eH as PayoutMethods, eI as PayoutStatuses, eJ as PayoutTokenAttributeDataTypes, eK as PayoutTokenAttributeInputTypes, eL as PayoutTokenAttributeValueTypes, eM as PayoutTokenProviders, eN as PayoutTokenStatuses, eO as PayoutTypes, eP as PaypalAccountStatuses, eQ as PerkStatus, eR as PlanDirectLink, eS as PlanFilters, eT as PlanOrder, eU as PlanTypes, eV as PlansOrder, eW as PlansSortableColumns, eX as PollInput, eY as PollOptionInput, eZ as PostTypes, id as ProcessAttachmentMutation, ic as ProcessAttachmentMutationVariables, e_ as ProcessEntitiesInput, e$ as ProductHighlightTypes, f0 as ProductImageStyles, f1 as ProductTaxCodeProductTypes, f2 as ProductUserFilters, f3 as ProductUserOrder, f4 as ProfileVisibilities, f5 as PromoCodeFilters, f6 as PromoCodeNewStatus, f7 as PromoCodeOrder, f8 as PromoCodeStatus, f9 as PromoCodesSortableColumns, fa as PromoDurations, fb as PromoTypes, i3 as PromoteAppBuildMutation, i2 as PromoteAppBuildMutationVariables, fc as PromoteAppBuildToProductionInput, fd as PublicAccessPassesOrder, fe as PublicBountiesOrder, hq as PublicExperienceFragmentFragment, ff as ReactionInput, fg as ReactionTypes, fh as ReceiptFeeTypes, fi as ReceiptPaymentProcessor, fj as ReceiptStatus, fk as ReceiptStatusV2, fl as ReceiptTaxBehaviors, fm as ReceiptV2Filters, fn as ReceiptV2Order, fo as ReceiptsSortableColumns, ai as ReceivableWebsocketMessage, fp as RefundStatuses, af as RefundWebhookData, fq as ReleaseMethod, fr as ReleaseMethodSettingsInput, fs as ReportTypes, km as Requester, ft as ResolutionActions, fu as ResolutionCustomerResponses, fv as ResolutionFilters, fw as ResolutionIneligibilityReason, fx as ResolutionIssueTypes, fy as ResolutionMerchantResponses, fz as ResolutionOrder, fA as ResolutionPlatformResponses, fB as ResolutionReporters, fC as ResolutionStatuses, fD as ResolutionsSortableColumns, fE as RestrictionSetReasonCodes, fF as RetryPaymentMyMembershipInput, fG as ReviewReportStatus, fH as ReviewStatus, fI as ReviewsSortableColumns, fJ as RewardUnits, fK as RfiStatuses, ax as Scalars, kq as Sdk, fL as SecurityLevels, jB as SendDirectMessageToUserMutation, jA as SendDirectMessageToUserMutationVariables, fM as SendMessageInput, jD as SendMessageToChatMutation, jC as SendMessageToChatMutationVariables, fN as SendNotificationInput, jF as SendPushNotificationMutation, jE as SendPushNotificationMutationVariables, aj as SendableWebsocketMessage, fO as SimpleNotificationPreferenceStatus, fP as SocialLinkWebsites, fQ as SpecificFeeOrigins, fR as StatsConfigInput, fS as Status, fT as Statuses, fU as StripeAccountStatuses, fV as StripeAccountTypes, fW as StripeExternalAccountStatuses, fX as StripePayoutMethods, fY as StripePayoutPayoutTypes, fZ as StripePayoutStatuses, f_ as StripePayoutTraceStatuses, f$ as TaxTypes, g0 as TerminateMyMembershipInput, kj as TestWebhookMutation, ki as TestWebhookMutationVariables, g1 as TestWebhookV2Input, g2 as ToggleCancelMyMembershipInput, g3 as TrackingLinkDestination, g4 as TrackingLinksSortableColumns, g5 as TrackingPixelTypes, g6 as TransferFundsInput, g7 as TransferLinkMyMembershipInput, i5 as UnassignAppBuildMutation, i4 as UnassignAppBuildMutationVariables, g8 as UnassignProductionAppBuildInput, g9 as UnbanUserInput, k7 as UnbanUserMutation, k6 as UnbanUserMutationVariables, ga as UniversalPostFeedTypes, k9 as UnmuteUserMutation, k8 as UnmuteUserMutationVariables, gb as UpdateAccessPassInput, hH as UpdateAccessPassMutation, hG as UpdateAccessPassMutationVariables, gc as UpdateAffiliateInput, hV as UpdateAffiliateMutation, hU as UpdateAffiliateMutationVariables, gd as UpdateAgentUserInput, ge as UpdateAppInput, i9 as UpdateAppMutation, i8 as UpdateAppMutationVariables, gf as UpdateAppPermissionRequirementsInput, i7 as UpdateAppPermissionsMutation, i6 as UpdateAppPermissionsMutationVariables, gg as UpdateChapterInput, j5 as UpdateChapterMutation, j4 as UpdateChapterMutationVariables, gh as UpdateChapterOrderInput, j3 as UpdateChapterOrderMutation, j2 as UpdateChapterOrderMutationVariables, gi as UpdateLessonInput, j9 as UpdateLessonMutation, j8 as UpdateLessonMutationVariables, gj as UpdateLessonOrderInput, j7 as UpdateLessonOrderMutation, j6 as UpdateLessonOrderMutationVariables, gk as UpdateMembershipInput, gl as UpdateWebhookInput, kl as UpdateWebhookMutation, kk as UpdateWebhookMutationVariables, ig as UploadMediaMutation, ie as UploadMediaMutationVariables, gm as UploadPartInput, gn as UpsellPlanInput, go as UpsellTypes, gp as UserAffiliateReferralLogFilters, gq as UserAffiliateReferralLogOrder, gr as UserChartConfigInput, gs as UserContentRewardsSubmissionsFilters, gt as UserContentRewardsSubmissionsOrder, gu as UserNotificationPreferenceChannel, gv as UserOnboardingStepsTypes, gw as UserReceiptFilters, gx as UserReceiptOrder, gy as UserReceiptPaidTypeFilter, gz as UserSocialLinkWebsites, aa as UserTokenPayload, gA as UserTypes, gB as ValidMembershipsOrder, gC as VaultMethods, gD as VaultTokenProviders, gE as VerificationErrorCodes, gF as VerificationProviders, gG as VerificationStatuses, gH as VerifiedStatuses, ab as VerifyUserTokenOptions, gI as VersionEventTypes, gJ as VersionFilters, gK as VersionObjects, gL as VersionOrder, gM as Visibility, gN as VisibilityFilter, gO as VoidInvoiceInput, gP as WebhookEvent, ak as WebsocketBroadcastTarget, al as WebsocketMessageHandler, am as WebsocketStatus, an as WebsocketStatusHandler, gQ as WeeklyAnchors, gR as WhoCanPostTypes, gS as WhoCanReactTypes, gT as WhopSidebarFilters, gU as WhopSidebarOrderEnum, gV as WhopSidebarWithEarningsFilters, gW as WhopSidebarWithEarningsOrderEnum, ah as WhopWebhookRequestBody, ao as WhopWebsocketClientBase, ap as WhopWebsocketClientServer, kn as WithError, gX as WithdrawalFeeTypes, gY as WithdrawalFilters, gZ as WithdrawalMethods, g_ as WithdrawalProviders, g$ as WithdrawalSpeeds, h0 as WithdrawalStatus, h1 as WithdrawalTypes, h2 as WithdrawalsSortableColumns, ko as carryErrors, kp as getSdk, a7 as getUserToken, a8 as makeUserTokenVerifier, ag as makeWebhookValidator, a6 as proto, a9 as verifyUserToken } from './client-sdk-shared-CwmY1-gp.mjs';
import 'tiny-typed-emitter';
import '@auth/core/providers';

declare function WhopClientSdk(options?: WhopClientSdkOptions): {
    attachments: {
        uploadAttachment: (input: {
            data: File | Blob;
            id: string;
            multipartUploadUrls: {
                __typename?: "MultipartUrl";
                partNumber: number;
                url: string;
            }[];
            multipartUploadId: string;
            record: AttachableRecords;
            multipart: true;
            uploadUrl?: undefined;
            headers?: undefined;
        } | {
            data: File | Blob;
            id: string;
            uploadUrl: string;
            headers: Record<string, string>;
            record: AttachableRecords;
            multipart: false;
            multipartUploadUrls?: undefined;
            multipartUploadId?: undefined;
        } | {
            file: File | Blob;
            record: AttachableRecords;
        } | Promise<{
            data: File | Blob;
            id: string;
            multipartUploadUrls: {
                __typename?: "MultipartUrl";
                partNumber: number;
                url: string;
            }[];
            multipartUploadId: string;
            record: AttachableRecords;
            multipart: true;
            uploadUrl?: undefined;
            headers?: undefined;
        } | {
            data: File | Blob;
            id: string;
            uploadUrl: string;
            headers: Record<string, string>;
            record: AttachableRecords;
            multipart: false;
            multipartUploadUrls?: undefined;
            multipartUploadId?: undefined;
        }>, args_1?: UploadFileOptions | undefined) => Promise<UploadAttachmentResponse>;
        prepareAttachmentForUpload: (data: File | Blob, record: AttachableRecords) => Promise<{
            data: File | Blob;
            id: string;
            multipartUploadUrls: {
                __typename?: "MultipartUrl";
                partNumber: number;
                url: string;
            }[];
            multipartUploadId: string;
            record: AttachableRecords;
            multipart: true;
            uploadUrl?: undefined;
            headers?: undefined;
        } | {
            data: File | Blob;
            id: string;
            uploadUrl: string;
            headers: Record<string, string>;
            record: AttachableRecords;
            multipart: false;
            multipartUploadUrls?: undefined;
            multipartUploadId?: undefined;
        }>;
        analyzeAttachment: (signedId: string, opts?: {
            signal?: AbortSignal;
        } | undefined) => Promise<({
            __typename: "AudioAttachment";
            duration?: number | null;
            waveformUrl?: string | null;
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | ({
            __typename: "ImageAttachment";
            height?: number | null;
            width?: number | null;
            blurhash?: string | null;
            aspectRatio?: number | null;
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | ({
            __typename: "OtherAttachment";
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | ({
            __typename: "VideoAttachment";
            height?: number | null;
            width?: number | null;
            duration?: number | null;
            aspectRatio?: number | null;
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            preview: {
                __typename?: "AttachmentSource";
                url: string;
            };
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | undefined>;
        getAttachment(variables: Exact<{
            id: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetAttachmentQuery["attachment"]>>;
        processAttachment(variables: AnalyzeAttachmentInput, options?: RequestInit | undefined): Promise<WithError<ProcessAttachmentMutation["mediaAnalyzeAttachment"]>>;
        uploadMedia(variables: DirectUploadInput, options?: RequestInit | undefined): Promise<WithError<UploadMediaMutation["mediaDirectUpload"]>>;
    };
    websockets: {
        client: (options: WebsocketClientOptionsClient) => WhopWebsocketClientBrowser;
    };
    accessPasses: {
        getAccessPass(variables: Exact<{
            accessPassId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetAccessPassQuery["accessPass"]>>;
    };
    companies: {
        getCompany(variables: Exact<{
            companyId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetCompanyQuery["company"]>>;
    };
    courses: {
        createAssessmentQuestion(variables: CreateAssessmentQuestionInput, options?: RequestInit | undefined): Promise<WithError<CreateAssessmentQuestionMutation["createAssessmentQuestion"]>>;
        createChapter(variables: CreateChapterInput, options?: RequestInit | undefined): Promise<WithError<CreateChapterMutation["createChapter"]>>;
        createCourse(variables: CreateCourseInput, options?: RequestInit | undefined): Promise<WithError<CreateCourseMutation["createCourse"]>>;
        createLesson(variables: CreateLessonInput, options?: RequestInit | undefined): Promise<WithError<CreateLessonMutation["createLesson"]>>;
        deleteAssessmentQuestionImage(variables: DeleteAssessmentQuestionImageInput, options?: RequestInit | undefined): Promise<WithError<DeleteAssessmentQuestionImageMutation["deleteAssessmentQuestionImage"]>>;
        deleteChapter(variables: DeleteChapterInput, options?: RequestInit | undefined): Promise<WithError<DeleteChapterMutation["deleteChapter"]>>;
        deleteLessonAttachment(variables: DeleteLessonAttachmentInput, options?: RequestInit | undefined): Promise<WithError<DeleteLessonAttachmentMutation["deleteLessonAttachment"]>>;
        deleteLesson(variables: DeleteLessonInput, options?: RequestInit | undefined): Promise<WithError<DeleteLessonMutation["deleteLesson"]>>;
        getCourse(variables: Exact<{
            courseId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetCourseQuery["course"]>>;
        getLesson(variables: Exact<{
            courseId: Scalars["ID"]["input"];
            lessonId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetLessonQuery["course"]>>;
        getUserLessonInteractions(variables: Exact<{
            courseId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetUserLessonInteractionsQuery["course"]>>;
        listCoursesForCompany(variables: Exact<{
            companyId: Scalars["ID"]["input"];
            first?: InputMaybe<Scalars["Int"]["input"]>;
            after?: InputMaybe<Scalars["String"]["input"]>;
        }>, options?: RequestInit | undefined): Promise<WithError<ListCoursesForCompanyQuery["company"]>>;
        listCoursesForExperience(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
            first?: InputMaybe<Scalars["Int"]["input"]>;
            after?: InputMaybe<Scalars["String"]["input"]>;
        }>, options?: RequestInit | undefined): Promise<WithError<ListCoursesForExperienceQuery["publicExperience"]>>;
        markLessonAsCompleted(variables: MarkLessonAsCompletedInput, options?: RequestInit | undefined): Promise<WithError<MarkLessonAsCompletedMutation["markLessonAsCompleted"]>>;
        moveCourse(variables: MoveCourseInput, options?: RequestInit | undefined): Promise<WithError<MoveCourseMutation["moveCourse"]>>;
        updateChapterOrder(variables: UpdateChapterOrderInput, options?: RequestInit | undefined): Promise<WithError<UpdateChapterOrderMutation["updateChapterOrder"]>>;
        updateChapter(variables: UpdateChapterInput, options?: RequestInit | undefined): Promise<WithError<UpdateChapterMutation["updateChapter"]>>;
        updateLessonOrder(variables: UpdateLessonOrderInput, options?: RequestInit | undefined): Promise<WithError<UpdateLessonOrderMutation["updateLessonOrder"]>>;
        updateLesson(variables: UpdateLessonInput, options?: RequestInit | undefined): Promise<WithError<UpdateLessonMutation["updateLesson"]>>;
    };
    experiences: {
        getExperience(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetExperienceQuery["experience"]>>;
        listUsersForExperience(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
            after?: InputMaybe<Scalars["String"]["input"]>;
            before?: InputMaybe<Scalars["String"]["input"]>;
            direction?: InputMaybe<Direction>;
            first?: InputMaybe<Scalars["Int"]["input"]>;
            searchQuery?: InputMaybe<Scalars["String"]["input"]>;
        }>, options?: RequestInit | undefined): Promise<WithError<ListUsersForExperienceQuery["publicExperience"]>>;
    };
    forums: {
        listForumPostsFromForum(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<ListForumPostsFromForumQuery["feedPosts"]>>;
    };
    messages: {
        listMessagesFromChat(variables?: Exact<{
            chatExperienceId?: InputMaybe<Scalars["ID"]["input"]>;
        }> | undefined, options?: RequestInit | undefined): Promise<WithError<ListMessagesFromChatQuery["feedPosts"]>>;
    };
    users: {
        getCurrentUser(variables?: Exact<{
            [key: string]: never;
        }> | undefined, options?: RequestInit | undefined): Promise<WithError<GetCurrentUserQuery["viewer"]>>;
        getUserLedgerAccount(variables?: Exact<{
            [key: string]: never;
        }> | undefined, options?: RequestInit | undefined): Promise<WithError<GetUserLedgerAccountQuery["viewer"]>>;
        getUser(variables: Exact<{
            userId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetUserQuery["publicUser"]>>;
    };
};
type WhopClientSdk = ReturnType<typeof WhopClientSdk>;

declare function WhopServerSdk(options: WhopServerSdkOptions): WhopServerSdk$1;
type WhopServerSdk = ReturnType<typeof WhopServerSdk>;

export { UploadAttachmentResponse, WhopClientSdk, WhopClientSdkOptions, WhopServerSdk, WhopServerSdkOptions, WhopWebsocketClientBrowser };
