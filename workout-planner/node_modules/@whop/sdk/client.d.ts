import type { RequestInit, RequestInfo } from "./internal/builtin-types.js";
import type { PromiseOrValue, MergedRequestInit, FinalizedRequestInit } from "./internal/types.js";
export type { Logger, LogLevel } from "./internal/utils/log.js";
import * as Opts from "./internal/request-options.js";
import * as Errors from "./core/error.js";
import * as Pagination from "./core/pagination.js";
import { type CursorPageParams, CursorPageResponse } from "./core/pagination.js";
import * as Uploads from "./core/uploads.js";
import * as API from "./resources/index.js";
import { APIPromise } from "./core/api-promise.js";
import { AppBuildCreateParams, AppBuildListParams, AppBuildListResponse, AppBuildListResponsesCursorPage, AppBuilds } from "./resources/app-builds.js";
import { AppCreateParams, AppListParams, AppListResponse, AppListResponsesCursorPage, AppUpdateParams, Apps } from "./resources/apps.js";
import { AuthorizedUserListParams, AuthorizedUserListResponse, AuthorizedUserListResponsesCursorPage, AuthorizedUserRetrieveResponse, AuthorizedUsers } from "./resources/authorized-users.js";
import { ChatChannelListParams, ChatChannelListResponse, ChatChannelListResponsesCursorPage, ChatChannelUpdateParams, ChatChannels } from "./resources/chat-channels.js";
import { CheckoutConfigurationCreateParams, CheckoutConfigurationListParams, CheckoutConfigurationListResponse, CheckoutConfigurationListResponsesCursorPage, CheckoutConfigurations } from "./resources/checkout-configurations.js";
import { Companies } from "./resources/companies.js";
import { CourseLessonInteractionListParams, CourseLessonInteractions } from "./resources/course-lesson-interactions.js";
import { Entries, EntryApproveResponse, EntryListParams, EntryListResponse, EntryListResponsesCursorPage } from "./resources/entries.js";
import { ExperienceAttachParams, ExperienceCreateParams, ExperienceDeleteResponse, ExperienceDetachParams, ExperienceListParams, ExperienceListResponse, ExperienceListResponsesCursorPage, ExperienceUpdateParams, Experiences } from "./resources/experiences.js";
import { ForumPostCreateParams, ForumPostListParams, ForumPostListResponse, ForumPostListResponsesCursorPage, ForumPosts } from "./resources/forum-posts.js";
import { InvoiceCreateParams, InvoiceCreateResponse, InvoiceListParams, InvoiceVoidResponse, Invoices } from "./resources/invoices.js";
import { LedgerAccountRetrieveResponse, LedgerAccounts } from "./resources/ledger-accounts.js";
import { MembershipCancelParams, MembershipListParams, MembershipListResponse, MembershipListResponsesCursorPage, MembershipPauseParams, MembershipUpdateParams, Memberships } from "./resources/memberships.js";
import { MessageCreateParams, MessageListParams, MessageListResponse, MessageListResponsesCursorPage, Messages } from "./resources/messages.js";
import { PaymentListParams, PaymentListResponse, PaymentListResponsesCursorPage, PaymentRefundParams, Payments } from "./resources/payments.js";
import { PlanCreateParams, PlanDeleteResponse, PlanListParams, PlanListResponse, PlanListResponsesCursorPage, PlanUpdateParams, Plans } from "./resources/plans.js";
import { ProductCreateParams, ProductDeleteResponse, ProductListParams, ProductUpdateParams, Products } from "./resources/products.js";
import { ReactionCreateParams, ReactionListParams, ReactionListResponse, ReactionListResponsesCursorPage, Reactions } from "./resources/reactions.js";
import { ShipmentCreateParams, ShipmentListParams, ShipmentListResponse, ShipmentListResponsesCursorPage, Shipments } from "./resources/shipments.js";
import { SupportChannelCreateParams, SupportChannelListParams, SupportChannelListResponse, SupportChannelListResponsesCursorPage, SupportChannels } from "./resources/support-channels.js";
import { TransferCreateParams, TransferListParams, TransferListResponse, TransferListResponsesCursorPage, Transfers } from "./resources/transfers.js";
import { UserCheckAccessParams, UserCheckAccessResponse, UserRetrieveResponse, Users } from "./resources/users.js";
import { InvoiceCreatedWebhookEvent, InvoicePaidWebhookEvent, InvoicePastDueWebhookEvent, InvoiceVoidedWebhookEvent, UnwrapWebhookEvent, Webhooks } from "./resources/webhooks.js";
import { type Fetch } from "./internal/builtin-types.js";
import { HeadersLike, NullableHeaders } from "./internal/headers.js";
import { FinalRequestOptions, RequestOptions } from "./internal/request-options.js";
import { type LogLevel, type Logger } from "./internal/utils/log.js";
import { makeUserTokenVerifierFromSdk } from "./lib/verify-user-token.js";
export interface ClientOptions {
    /**
     * The app API key from an app from the /dashboard/developer page
     */
    apiKey?: string | undefined;
    /**
     * Defaults to process.env['WHOP_WEBHOOK_SECRET'].
     */
    webhookKey?: string | null | undefined;
    /**
     * Defaults to process.env['WHOP_APP_ID'].
     */
    appID?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['WHOP_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     *
     * @unit milliseconds
     */
    timeout?: number | undefined;
    /**
     * Additional `RequestInit` options to be passed to `fetch` calls.
     * Properties will be overridden by per-request `fetchOptions`.
     */
    fetchOptions?: MergedRequestInit | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we expect that `fetch` is defined globally.
     */
    fetch?: Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `null` in request options.
     */
    defaultHeaders?: HeadersLike | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Record<string, string | undefined> | undefined;
    /**
     * Set the log level.
     *
     * Defaults to process.env['WHOP_LOG'] or 'warn' if it isn't set.
     */
    logLevel?: LogLevel | undefined;
    /**
     * Set the logger.
     *
     * Defaults to globalThis.console.
     */
    logger?: Logger | undefined;
}
/**
 * API Client for interfacing with the Whop API.
 */
export declare class Whop {
    #private;
    apiKey: string;
    webhookKey: string | null;
    appID: string;
    baseURL: string;
    maxRetries: number;
    timeout: number;
    logger: Logger | undefined;
    logLevel: LogLevel | undefined;
    fetchOptions: MergedRequestInit | undefined;
    private fetch;
    protected idempotencyHeader?: string;
    private _options;
    /**
     * API Client for interfacing with the Whop API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['WHOP_API_KEY'] ?? undefined]
     * @param {string | null | undefined} [opts.webhookKey=process.env['WHOP_WEBHOOK_SECRET'] ?? null]
     * @param {string | undefined} [opts.appID=process.env['WHOP_APP_ID'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['WHOP_BASE_URL'] ?? https://api.whop.com/api/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.
     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, apiKey, webhookKey, appID, ...opts }?: ClientOptions);
    /**
     * Create a new client instance re-using the same options given to the current client with optional overriding.
     */
    withOptions(options: Partial<ClientOptions>): this;
    protected defaultQuery(): Record<string, string | undefined> | undefined;
    protected validateHeaders({ values, nulls }: NullableHeaders): void;
    protected authHeaders(opts: FinalRequestOptions): Promise<NullableHeaders | undefined>;
    protected stringifyQuery(query: Record<string, unknown>): string;
    private getUserAgent;
    protected defaultIdempotencyKey(): string;
    protected makeStatusError(status: number, error: Object, message: string | undefined, headers: Headers): Errors.APIError;
    buildURL(path: string, query: Record<string, unknown> | null | undefined, defaultBaseURL?: string | undefined): string;
    /**
     * Used as a callback for mutating the given `FinalRequestOptions` object.
     */
    protected prepareOptions(options: FinalRequestOptions): Promise<void>;
    /**
     * Used as a callback for mutating the given `RequestInit` object.
     *
     * This is useful for cases where you want to add certain headers based off of
     * the request properties, e.g. `method` or `url`.
     */
    protected prepareRequest(request: RequestInit, { url, options }: {
        url: string;
        options: FinalRequestOptions;
    }): Promise<void>;
    get<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    post<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    patch<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    put<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    delete<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    private methodRequest;
    request<Rsp>(options: PromiseOrValue<FinalRequestOptions>, remainingRetries?: number | null): APIPromise<Rsp>;
    private makeRequest;
    getAPIList<Item, PageClass extends Pagination.AbstractPage<Item> = Pagination.AbstractPage<Item>>(path: string, Page: new (...args: any[]) => PageClass, opts?: RequestOptions): Pagination.PagePromise<PageClass, Item>;
    requestAPIList<Item = unknown, PageClass extends Pagination.AbstractPage<Item> = Pagination.AbstractPage<Item>>(Page: new (...args: ConstructorParameters<typeof Pagination.AbstractPage>) => PageClass, options: FinalRequestOptions): Pagination.PagePromise<PageClass, Item>;
    fetchWithTimeout(url: RequestInfo, init: RequestInit | undefined, ms: number, controller: AbortController): Promise<Response>;
    private shouldRetry;
    private retryRequest;
    private calculateDefaultRetryTimeoutMillis;
    buildRequest(inputOptions: FinalRequestOptions, { retryCount }?: {
        retryCount?: number;
    }): Promise<{
        req: FinalizedRequestInit;
        url: string;
        timeout: number;
    }>;
    private buildHeaders;
    private buildBody;
    static Whop: typeof Whop;
    static DEFAULT_TIMEOUT: number;
    static WhopError: typeof Errors.WhopError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    apps: API.Apps;
    invoices: API.Invoices;
    courseLessonInteractions: API.CourseLessonInteractions;
    products: API.Products;
    companies: API.Companies;
    webhooks: API.Webhooks;
    plans: API.Plans;
    entries: API.Entries;
    forumPosts: API.ForumPosts;
    transfers: API.Transfers;
    ledgerAccounts: API.LedgerAccounts;
    memberships: API.Memberships;
    authorizedUsers: API.AuthorizedUsers;
    appBuilds: API.AppBuilds;
    shipments: API.Shipments;
    checkoutConfigurations: API.CheckoutConfigurations;
    messages: API.Messages;
    chatChannels: API.ChatChannels;
    users: API.Users;
    payments: API.Payments;
    supportChannels: API.SupportChannels;
    experiences: API.Experiences;
    reactions: API.Reactions;
    verifyUserToken: ReturnType<typeof makeUserTokenVerifierFromSdk>;
}
export declare namespace Whop {
    export type RequestOptions = Opts.RequestOptions;
    export import CursorPage = Pagination.CursorPage;
    export { type CursorPageParams as CursorPageParams, type CursorPageResponse as CursorPageResponse };
    export { Apps as Apps, type AppListResponse as AppListResponse, type AppListResponsesCursorPage as AppListResponsesCursorPage, type AppCreateParams as AppCreateParams, type AppUpdateParams as AppUpdateParams, type AppListParams as AppListParams, };
    export { Invoices as Invoices, type InvoiceCreateResponse as InvoiceCreateResponse, type InvoiceVoidResponse as InvoiceVoidResponse, type InvoiceCreateParams as InvoiceCreateParams, type InvoiceListParams as InvoiceListParams, };
    export { CourseLessonInteractions as CourseLessonInteractions, type CourseLessonInteractionListParams as CourseLessonInteractionListParams, };
    export { Products as Products, type ProductDeleteResponse as ProductDeleteResponse, type ProductCreateParams as ProductCreateParams, type ProductUpdateParams as ProductUpdateParams, type ProductListParams as ProductListParams, };
    export { Companies as Companies };
    export { Webhooks as Webhooks, type InvoiceCreatedWebhookEvent as InvoiceCreatedWebhookEvent, type InvoicePaidWebhookEvent as InvoicePaidWebhookEvent, type InvoicePastDueWebhookEvent as InvoicePastDueWebhookEvent, type InvoiceVoidedWebhookEvent as InvoiceVoidedWebhookEvent, type UnwrapWebhookEvent as UnwrapWebhookEvent, };
    export { Plans as Plans, type PlanListResponse as PlanListResponse, type PlanDeleteResponse as PlanDeleteResponse, type PlanListResponsesCursorPage as PlanListResponsesCursorPage, type PlanCreateParams as PlanCreateParams, type PlanUpdateParams as PlanUpdateParams, type PlanListParams as PlanListParams, };
    export { Entries as Entries, type EntryListResponse as EntryListResponse, type EntryApproveResponse as EntryApproveResponse, type EntryListResponsesCursorPage as EntryListResponsesCursorPage, type EntryListParams as EntryListParams, };
    export { ForumPosts as ForumPosts, type ForumPostListResponse as ForumPostListResponse, type ForumPostListResponsesCursorPage as ForumPostListResponsesCursorPage, type ForumPostCreateParams as ForumPostCreateParams, type ForumPostListParams as ForumPostListParams, };
    export { Transfers as Transfers, type TransferListResponse as TransferListResponse, type TransferListResponsesCursorPage as TransferListResponsesCursorPage, type TransferCreateParams as TransferCreateParams, type TransferListParams as TransferListParams, };
    export { LedgerAccounts as LedgerAccounts, type LedgerAccountRetrieveResponse as LedgerAccountRetrieveResponse, };
    export { Memberships as Memberships, type MembershipListResponse as MembershipListResponse, type MembershipListResponsesCursorPage as MembershipListResponsesCursorPage, type MembershipUpdateParams as MembershipUpdateParams, type MembershipListParams as MembershipListParams, type MembershipCancelParams as MembershipCancelParams, type MembershipPauseParams as MembershipPauseParams, };
    export { AuthorizedUsers as AuthorizedUsers, type AuthorizedUserRetrieveResponse as AuthorizedUserRetrieveResponse, type AuthorizedUserListResponse as AuthorizedUserListResponse, type AuthorizedUserListResponsesCursorPage as AuthorizedUserListResponsesCursorPage, type AuthorizedUserListParams as AuthorizedUserListParams, };
    export { AppBuilds as AppBuilds, type AppBuildListResponse as AppBuildListResponse, type AppBuildListResponsesCursorPage as AppBuildListResponsesCursorPage, type AppBuildCreateParams as AppBuildCreateParams, type AppBuildListParams as AppBuildListParams, };
    export { Shipments as Shipments, type ShipmentListResponse as ShipmentListResponse, type ShipmentListResponsesCursorPage as ShipmentListResponsesCursorPage, type ShipmentCreateParams as ShipmentCreateParams, type ShipmentListParams as ShipmentListParams, };
    export { CheckoutConfigurations as CheckoutConfigurations, type CheckoutConfigurationListResponse as CheckoutConfigurationListResponse, type CheckoutConfigurationListResponsesCursorPage as CheckoutConfigurationListResponsesCursorPage, type CheckoutConfigurationCreateParams as CheckoutConfigurationCreateParams, type CheckoutConfigurationListParams as CheckoutConfigurationListParams, };
    export { Messages as Messages, type MessageListResponse as MessageListResponse, type MessageListResponsesCursorPage as MessageListResponsesCursorPage, type MessageCreateParams as MessageCreateParams, type MessageListParams as MessageListParams, };
    export { ChatChannels as ChatChannels, type ChatChannelListResponse as ChatChannelListResponse, type ChatChannelListResponsesCursorPage as ChatChannelListResponsesCursorPage, type ChatChannelUpdateParams as ChatChannelUpdateParams, type ChatChannelListParams as ChatChannelListParams, };
    export { Users as Users, type UserRetrieveResponse as UserRetrieveResponse, type UserCheckAccessResponse as UserCheckAccessResponse, type UserCheckAccessParams as UserCheckAccessParams, };
    export { Payments as Payments, type PaymentListResponse as PaymentListResponse, type PaymentListResponsesCursorPage as PaymentListResponsesCursorPage, type PaymentListParams as PaymentListParams, type PaymentRefundParams as PaymentRefundParams, };
    export { SupportChannels as SupportChannels, type SupportChannelListResponse as SupportChannelListResponse, type SupportChannelListResponsesCursorPage as SupportChannelListResponsesCursorPage, type SupportChannelCreateParams as SupportChannelCreateParams, type SupportChannelListParams as SupportChannelListParams, };
    export { Experiences as Experiences, type ExperienceListResponse as ExperienceListResponse, type ExperienceDeleteResponse as ExperienceDeleteResponse, type ExperienceListResponsesCursorPage as ExperienceListResponsesCursorPage, type ExperienceCreateParams as ExperienceCreateParams, type ExperienceUpdateParams as ExperienceUpdateParams, type ExperienceListParams as ExperienceListParams, type ExperienceAttachParams as ExperienceAttachParams, type ExperienceDetachParams as ExperienceDetachParams, };
    export { Reactions as Reactions, type ReactionListResponse as ReactionListResponse, type ReactionListResponsesCursorPage as ReactionListResponsesCursorPage, type ReactionCreateParams as ReactionCreateParams, type ReactionListParams as ReactionListParams, };
    export type AccessPassType = API.AccessPassType;
    export type App = API.App;
    export type AppBuild = API.AppBuild;
    export type AppBuildPlatforms = API.AppBuildPlatforms;
    export type AppBuildStatuses = API.AppBuildStatuses;
    export type AppStatuses = API.AppStatuses;
    export type AppViewType = API.AppViewType;
    export type AuthorizedUserRoles = API.AuthorizedUserRoles;
    export type BusinessTypes = API.BusinessTypes;
    export type ChatChannel = API.ChatChannel;
    export type CheckoutConfiguration = API.CheckoutConfiguration;
    export type CollectionMethod = API.CollectionMethod;
    export type Company = API.Company;
    export type CourseLessonInteraction = API.CourseLessonInteraction;
    export type CourseLessonInteractionListItem = API.CourseLessonInteractionListItem;
    export type Currency = API.Currency;
    export type CustomCta = API.CustomCta;
    export type Direction = API.Direction;
    export type DmsPostTypes = API.DmsPostTypes;
    export type Entry = API.Entry;
    export type EntryStatus = API.EntryStatus;
    export type Experience = API.Experience;
    export type ForumPost = API.ForumPost;
    export type FriendlyReceiptStatus = API.FriendlyReceiptStatus;
    export type GlobalAffiliateStatus = API.GlobalAffiliateStatus;
    export type IndustryTypes = API.IndustryTypes;
    export type Invoice = API.Invoice;
    export type InvoiceListItem = API.InvoiceListItem;
    export type InvoiceStatus = API.InvoiceStatus;
    export type Membership = API.Membership;
    export type MembershipStatus = API.MembershipStatus;
    export type Message = API.Message;
    export type PageInfo = API.PageInfo;
    export type Payment = API.Payment;
    export type Plan = API.Plan;
    export type PlanType = API.PlanType;
    export type Product = API.Product;
    export type ProductListItem = API.ProductListItem;
    export type PromoType = API.PromoType;
    export type Reaction = API.Reaction;
    export type ReceiptStatus = API.ReceiptStatus;
    export type ReleaseMethod = API.ReleaseMethod;
    export type Shipment = API.Shipment;
    export type ShipmentCarrier = API.ShipmentCarrier;
    export type ShipmentStatus = API.ShipmentStatus;
    export type ShipmentSubstatus = API.ShipmentSubstatus;
    export type SupportChannel = API.SupportChannel;
    export type TaxType = API.TaxType;
    export type Transfer = API.Transfer;
    export type Visibility = API.Visibility;
    export type VisibilityFilter = API.VisibilityFilter;
    export type WhoCanPost = API.WhoCanPost;
    export type WhoCanReact = API.WhoCanReact;
}
//# sourceMappingURL=client.d.ts.map