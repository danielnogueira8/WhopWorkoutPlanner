"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Experiences = void 0;
const resource_1 = require("../core/resource.js");
const pagination_1 = require("../core/pagination.js");
const path_1 = require("../internal/utils/path.js");
class Experiences extends resource_1.APIResource {
    /**
     * Required permissions:
     *
     * - `experience:create`
     *
     * @example
     * ```ts
     * const experience = await client.experiences.create({
     *   app_id: 'app_xxxxxxxxxxxxxx',
     *   company_id: 'biz_xxxxxxxxxxxxxx',
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/experiences', { body, ...options });
    }
    /**
     * Retrieves an experience by ID
     *
     * @example
     * ```ts
     * const experience = await client.experiences.retrieve(
     *   'exp_xxxxxxxxxxxxxx',
     * );
     * ```
     */
    retrieve(id, options) {
        return this._client.get((0, path_1.path) `/experiences/${id}`, options);
    }
    /**
     * Required permissions:
     *
     * - `experience:update`
     *
     * @example
     * ```ts
     * const experience = await client.experiences.update(
     *   'exp_xxxxxxxxxxxxxx',
     * );
     * ```
     */
    update(id, body = {}, options) {
        return this._client.patch((0, path_1.path) `/experiences/${id}`, { body, ...options });
    }
    /**
     * Lists experiences for a company
     *
     * Required permissions:
     *
     * - `experience:hidden_experience:read`
     *
     * @example
     * ```ts
     * // Automatically fetches more pages as needed.
     * for await (const experienceListResponse of client.experiences.list(
     *   { company_id: 'biz_xxxxxxxxxxxxxx' },
     * )) {
     *   // ...
     * }
     * ```
     */
    list(query, options) {
        return this._client.getAPIList('/experiences', (pagination_1.CursorPage), { query, ...options });
    }
    /**
     * Required permissions:
     *
     * - `experience:delete`
     *
     * @example
     * ```ts
     * const experience = await client.experiences.delete(
     *   'exp_xxxxxxxxxxxxxx',
     * );
     * ```
     */
    delete(id, options) {
        return this._client.delete((0, path_1.path) `/experiences/${id}`, options);
    }
    /**
     * Adds an experience to an product, making it accessible to the product's
     * customers.
     *
     * Required permissions:
     *
     * - `experience:attach`
     *
     * @example
     * ```ts
     * const experience = await client.experiences.attach(
     *   'exp_xxxxxxxxxxxxxx',
     *   { product_id: 'prod_xxxxxxxxxxxxx' },
     * );
     * ```
     */
    attach(id, body, options) {
        return this._client.post((0, path_1.path) `/experiences/${id}/attach`, { body, ...options });
    }
    /**
     * Removes an experience from an product, making it inaccessible to the product's
     * customers.
     *
     * Required permissions:
     *
     * - `experience:detach`
     *
     * @example
     * ```ts
     * const experience = await client.experiences.detach(
     *   'exp_xxxxxxxxxxxxxx',
     *   { product_id: 'prod_xxxxxxxxxxxxx' },
     * );
     * ```
     */
    detach(id, body, options) {
        return this._client.post((0, path_1.path) `/experiences/${id}/detach`, { body, ...options });
    }
}
exports.Experiences = Experiences;
//# sourceMappingURL=experiences.js.map