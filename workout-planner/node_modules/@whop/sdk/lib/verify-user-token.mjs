import { importJWK, jwtVerify } from 'jose';
const USER_TOKEN_HEADER_NAME = 'x-whop-user-token';
const USER_TOKEN_VERIFICATION_KEY = '{"kty":"EC","x":"rz8a8vxvexHC0TLT91g7llOdDOsNuYiGEfic4Qhni-E","y":"zH0QblKYToexd5PEIMGXPVJS9AB5smKrW4S_TbiXrOs","crv":"P-256"}';
export function getUserToken(tokenOrHeadersOrRequest, options) {
    const headerName = options?.headerName ?? USER_TOKEN_HEADER_NAME;
    if (typeof tokenOrHeadersOrRequest === 'string')
        return tokenOrHeadersOrRequest;
    if (tokenOrHeadersOrRequest instanceof Headers)
        return tokenOrHeadersOrRequest.get(headerName);
    if (tokenOrHeadersOrRequest instanceof Request)
        return tokenOrHeadersOrRequest.headers.get(headerName);
    return null;
}
export function makeUserTokenVerifierFromSdk(client) {
    const baseOptions = {
        appId: client.appID,
    };
    return async function verifyUserToken(tokenOrHeadersOrRequest, options) {
        return await internalVerifyUserToken(tokenOrHeadersOrRequest, {
            ...baseOptions,
            ...options,
        });
    };
}
export function verifyUserToken(tokenOrHeadersOrRequest, overrideOptions) {
    return internalVerifyUserToken(tokenOrHeadersOrRequest, {
        ...overrideOptions,
    });
}
async function internalVerifyUserToken(tokenOrHeadersOrRequest, options) {
    try {
        const tokenString = getUserToken(tokenOrHeadersOrRequest, {
            headerName: options?.headerName,
        });
        if (!tokenString) {
            throw new Error('Whop user token not found. If you are the app developer, ensure you are developing in the whop.com iframe and have the dev proxy enabled.');
        }
        const jwkString = options.publicKey ?? USER_TOKEN_VERIFICATION_KEY;
        const key = await importJWK(JSON.parse(jwkString), 'ES256').catch(() => {
            throw new Error('Invalid public key provided to verifyUserToken');
        });
        const token = await jwtVerify(tokenString, key, {
            issuer: 'urn:whopcom:exp-proxy',
        }).catch((_e) => {
            throw new Error('Invalid user token provided to verifyUserToken');
        });
        if (!(token.payload.sub && token.payload.aud) || Array.isArray(token.payload.aud)) {
            throw new Error('Invalid user token provided to verifyUserToken');
        }
        if (options.appId && token.payload.aud !== options.appId)
            throw new Error('Invalid app id provided to verifyUserToken');
        return {
            appId: token.payload.aud,
            userId: token.payload.sub,
        };
    }
    catch (e) {
        if (options.dontThrow) {
            return null;
        }
        throw e;
    }
}
//# sourceMappingURL=verify-user-token.mjs.map