'use client';
import classNames from 'classnames';
import * as React from 'react';
import { Avatar } from '../avatar';
import { avatarStackPropDefs } from './avatar-stack.props';
const AvatarStackContext = React.createContext({
    size: avatarStackPropDefs.size.default,
});
const AvatarStackRoot = (props) => {
    const { className, children, size = avatarStackPropDefs.size.default, ...rootProps } = props;
    // Convert children to array and reverse it only once during render
    const reversedChildren = React.useMemo(() => React.Children.toArray(children).reverse(), [children]);
    return (React.createElement("div", { ...rootProps, className: classNames('fui-AvatarStackRoot', className, `fui-r-size-${size}`) },
        React.createElement(AvatarStackContext.Provider, { value: { size } }, reversedChildren)));
};
AvatarStackRoot.displayName = 'AvatarStackRoot';
const AvatarStackAvatar = ({ className, ...props }) => {
    const { size } = React.useContext(AvatarStackContext);
    return React.createElement(Avatar, { size: size, className: classNames('fui-AvatarStackAvatar', className), ...props });
};
AvatarStackAvatar.displayName = 'AvatarStackAvatar';
export { AvatarStackAvatar as Avatar, AvatarStackRoot as Root };
//# sourceMappingURL=avatar-stack.js.map