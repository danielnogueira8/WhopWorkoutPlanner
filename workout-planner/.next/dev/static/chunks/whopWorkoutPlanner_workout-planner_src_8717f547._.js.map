{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/components/whop-context/whop-context.tsx"],"sourcesContent":["\"use client\";\n\nimport { createContext, useContext } from \"react\";\nimport type { WhopAccess, WhopExperience, WhopUser } from \"~/lib/whop\";\n\n/**\n * The context for the Whop API\n * @property experience - The experience\n * @property user - The user\n * @property access - Whether the user has access to the experience\n */\ninterface WhopContext {\n  experience: WhopExperience;\n  user: WhopUser;\n  access: WhopAccess;\n}\n\nexport const WhopContext = createContext<WhopContext | null>(null);\n\n/**\n * Hook to use the Whop context\n *\n * @example\n * const { experience, user, access } = useWhop()\n * return (\n *   <div>\n *     <h1>{experience.name}</h1>\n *     <p>{user.name}</p>\n *     <p>{access.accessLevel}</p>\n *   </div>\n * )\n */\nexport function useWhop(): WhopContext {\n  const context = useContext(WhopContext);\n  if (!context) throw new Error(\"useWhop must be used within a WhopProvider\");\n  return context;\n}\n"],"names":[],"mappings":";;;;;;AAEA;;AAFA;;AAiBO,MAAM,4BAAc,IAAA,0NAAa,EAAqB;AAetD,SAAS;;IACd,MAAM,UAAU,IAAA,uNAAU,EAAC;IAC3B,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;IAC9B,OAAO;AACT;GAJgB","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/env.ts"],"sourcesContent":["import { vercel } from '@t3-oss/env-core/presets-zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\nimport z from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tWHOP_API_KEY: z.string(),\n\n\t\t// Whop Payments\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_WHOP_APP_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: z.string(),\n\t\tNEXT_PUBLIC_VERCEL_URL: z.string().default('http://localhost:3000'),\n\t},\n\truntimeEnv: {\n\t\t// Server\n\t\tWHOP_API_KEY: process.env.WHOP_API_KEY,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID:\n\t\t\tprocess.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: process.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_ID,\n\n\t\t// Client\n\t\tNEXT_PUBLIC_WHOP_APP_ID: process.env.NEXT_PUBLIC_WHOP_APP_ID,\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n\t\tNEXT_PUBLIC_VERCEL_URL: process.env.NEXT_PUBLIC_VERCEL_URL,\n\t},\n\textends: [vercel()],\n})\n"],"names":[],"mappings":";;;;AAsBgB;AAtBhB;AACA;AACA;;;;AAEO,MAAM,MAAM,IAAA,yNAAS,EAAC;IAC5B,QAAQ;QACP,cAAc,sMAAC,CAAC,MAAM;QAEtB,gBAAgB;QAChB,uCAAuC,sMAAC,CAAC,MAAM;QAC/C,kCAAkC,sMAAC,CAAC,MAAM;QAC1C,2CAA2C,sMAAC,CAAC,MAAM;QACnD,sCAAsC,sMAAC,CAAC,MAAM;IAC/C;IACA,QAAQ;QACP,yBAAyB,sMAAC,CAAC,MAAM;QACjC,gCAAgC,sMAAC,CAAC,MAAM;QACxC,6BAA6B,sMAAC,CAAC,MAAM;QACrC,wBAAwB,sMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC5C;IACA,YAAY;QACX,SAAS;QACT,cAAc,uNAAO,CAAC,GAAG,CAAC,YAAY;QACtC,uCAAuC,uNAAO,CAAC,GAAG,CAAC,qCAAqC;QACxF,kCAAkC,uNAAO,CAAC,GAAG,CAAC,gCAAgC;QAC9E,2CACC,uNAAO,CAAC,GAAG,CAAC,yCAAyC;QACtD,sCAAsC,uNAAO,CAAC,GAAG,CAAC,oCAAoC;QAEtF,SAAS;QACT,uBAAuB;QACvB,8BAA8B;QAC9B,2BAA2B;QAC3B,wBAAwB,uNAAO,CAAC,GAAG,CAAC,sBAAsB;IAC3D;IACA,SAAS;QAAC,IAAA,6NAAM;KAAG;AACpB","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/components/whop-context/whop-queries.ts"],"sourcesContent":["import { defaultShouldDehydrateQuery, QueryClient } from '@tanstack/react-query'\nimport { env } from '~/env'\nimport type { WhopAccess, WhopExperience, WhopUser } from '~/lib/whop'\n\nexport const serverQueryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\tstaleTime: 60 * 1000, // 1 minute\n\t\t\tretry: 1,\n\t\t},\n\t\tdehydrate: {\n\t\t\tshouldDehydrateQuery: (query) =>\n\t\t\t\tdefaultShouldDehydrateQuery(query) || query.state.status === 'pending',\n\t\t},\n\t},\n})\n\nexport function getApiUrl(path: string): string {\n\tif (typeof window === 'undefined') {\n\t\treturn `${env.NEXT_PUBLIC_VERCEL_URL}${path}`\n\t}\n\treturn path\n}\n\nexport const whopExperienceQuery = (experienceId: string) => ({\n\tqueryKey: ['experience', experienceId],\n\tqueryFn: async () => {\n\t\tconst response = await fetch(getApiUrl(`/api/experience/${experienceId}`))\n\t\tif (!response.ok) throw new Error('Failed to fetch whop experience')\n\t\tconst result = (await response.json()) as WhopExperience\n\t\treturn result\n\t},\n})\n\nexport const whopUserQuery = (experienceId: string) => ({\n\tqueryKey: ['user', experienceId],\n\tqueryFn: async () => {\n\t\tconst response = await fetch(getApiUrl(`/api/experience/${experienceId}/user`))\n\t\tif (!response.ok) throw new Error('Failed to fetch whop user')\n\t\treturn response.json() as Promise<{ user: WhopUser; access: WhopAccess }>\n\t},\n})\n\nexport const receiptsQuery = () => ({\n\tqueryKey: ['receipts'],\n\tqueryFn: async () => {\n\t\tconst response = await fetch(getApiUrl('/api/receipts'))\n\t\tif (!response.ok) throw new Error('Failed to fetch receipts')\n\t\treturn response.json() as Promise<{\n\t\t\taccessPasses: Array<{\n\t\t\t\tid: string\n\t\t\t\ttype: 'one-time' | 'subscription'\n\t\t\t\treceipts: Array<{\n\t\t\t\t\tamountPaid: number\n\t\t\t\t\tpaidAt: string\n\t\t\t\t\tsubscriptionStatus?: string | null\n\t\t\t\t\tmembershipId?: string | null\n\t\t\t\t\tmember?: {\n\t\t\t\t\t\tid: string\n\t\t\t\t\t} | null\n\t\t\t\t}>\n\t\t\t}>\n\t\t}>\n\t},\n})\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AAAA;AACA;;;AAGO,MAAM,oBAAoB,IAAI,2OAAW,CAAC;IAChD,gBAAgB;QACf,SAAS;YACR,WAAW,KAAK;YAChB,OAAO;QACR;QACA,WAAW;YACV,sBAAsB,CAAC,QACtB,IAAA,yPAA2B,EAAC,UAAU,MAAM,KAAK,CAAC,MAAM,KAAK;QAC/D;IACD;AACD;AAEO,SAAS,UAAU,IAAY;IACrC;;IAGA,OAAO;AACR;AAEO,MAAM,sBAAsB,CAAC,eAAyB,CAAC;QAC7D,UAAU;YAAC;YAAc;SAAa;QACtC,SAAS;YACR,MAAM,WAAW,MAAM,MAAM,UAAU,CAAC,gBAAgB,EAAE,cAAc;YACxE,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAClC,MAAM,SAAU,MAAM,SAAS,IAAI;YACnC,OAAO;QACR;IACD,CAAC;AAEM,MAAM,gBAAgB,CAAC,eAAyB,CAAC;QACvD,UAAU;YAAC;YAAQ;SAAa;QAChC,SAAS;YACR,MAAM,WAAW,MAAM,MAAM,UAAU,CAAC,gBAAgB,EAAE,aAAa,KAAK,CAAC;YAC7E,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAClC,OAAO,SAAS,IAAI;QACrB;IACD,CAAC;AAEM,MAAM,gBAAgB,IAAM,CAAC;QACnC,UAAU;YAAC;SAAW;QACtB,SAAS;YACR,MAAM,WAAW,MAAM,MAAM,UAAU;YACvC,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAClC,OAAO,SAAS,IAAI;QAerB;IACD,CAAC","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/components/whop-context/whop-provider.tsx"],"sourcesContent":["'use client'\n\nimport {\n  DehydratedState,\n  HydrationBoundary,\n  QueryClient,\n  QueryClientProvider,\n  useQuery,\n} from '@tanstack/react-query'\nimport { type ReactNode, useState } from 'react'\nimport { WhopContext } from './whop-context'\nimport { whopExperienceQuery, whopUserQuery } from './whop-queries'\n\ninterface WhopProviderProps {\n  children: ReactNode\n  experienceId: string\n  state: DehydratedState\n}\n\nexport function WhopProvider({ children, experienceId, state }: WhopProviderProps) {\n  const [client] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            staleTime: 60 * 1000, // 1 minute\n            retry: 1,\n          },\n        },\n      }),\n  )\n\n  return (\n    <QueryClientProvider client={client}>\n      <HydrationBoundary state={state}>\n        <WhopProviderInner experienceId={experienceId}>{children}</WhopProviderInner>\n      </HydrationBoundary>\n    </QueryClientProvider>\n  )\n}\n\ninterface WhopProviderInnerProps {\n  children: ReactNode\n  experienceId: string\n}\n\nfunction WhopProviderInner({ children, experienceId }: WhopProviderInnerProps) {\n  const { data: experience, isLoading: isLoadingExperience } = useQuery(whopExperienceQuery(experienceId))\n  const { data: userAndAccess, isLoading: isLoadingUser } = useQuery(whopUserQuery(experienceId))\n\n  if (isLoadingExperience || isLoadingUser || !experience || !userAndAccess) {\n    return null\n  }\n\n  return (\n    <WhopContext.Provider value={{ experience, user: userAndAccess.user, access: userAndAccess.access }}>\n      {children}\n    </WhopContext.Provider>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;AAXA;;;;;AAmBO,SAAS,aAAa,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAqB;;IAC/E,MAAM,CAAC,OAAO,GAAG,IAAA,qNAAQ;iCACvB,IACE,IAAI,2OAAW,CAAC;gBACd,gBAAgB;oBACd,SAAS;wBACP,WAAW,KAAK;wBAChB,OAAO;oBACT;gBACF;YACF;;IAGJ,qBACE,yOAAC,4PAAmB;QAAC,QAAQ;kBAC3B,cAAA,yOAAC,wPAAiB;YAAC,OAAO;sBACxB,cAAA,yOAAC;gBAAkB,cAAc;0BAAe;;;;;;;;;;;;;;;;AAIxD;GApBgB;KAAA;AA2BhB,SAAS,kBAAkB,EAAE,QAAQ,EAAE,YAAY,EAA0B;;IAC3E,MAAM,EAAE,MAAM,UAAU,EAAE,WAAW,mBAAmB,EAAE,GAAG,IAAA,sOAAQ,EAAC,IAAA,6NAAmB,EAAC;IAC1F,MAAM,EAAE,MAAM,aAAa,EAAE,WAAW,aAAa,EAAE,GAAG,IAAA,sOAAQ,EAAC,IAAA,uNAAa,EAAC;IAEjF,IAAI,uBAAuB,iBAAiB,CAAC,cAAc,CAAC,eAAe;QACzE,OAAO;IACT;IAEA,qBACE,yOAAC,sNAAW,CAAC,QAAQ;QAAC,OAAO;YAAE;YAAY,MAAM,cAAc,IAAI;YAAE,QAAQ,cAAc,MAAM;QAAC;kBAC/F;;;;;;AAGP;IAbS;;QACsD,sOAAQ;QACX,sOAAQ;;;MAF3D","debugId":null}}]
}