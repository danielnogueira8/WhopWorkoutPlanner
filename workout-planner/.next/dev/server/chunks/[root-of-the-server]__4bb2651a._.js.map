{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/env.ts"],"sourcesContent":["import { vercel } from '@t3-oss/env-core/presets-zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\nimport z from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tWHOP_API_KEY: z.string(),\n\n\t\t// Whop Payments\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_WHOP_APP_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: z.string(),\n\t\tNEXT_PUBLIC_VERCEL_URL: z.string().default('http://localhost:3000'),\n\t},\n\truntimeEnv: {\n\t\t// Server\n\t\tWHOP_API_KEY: process.env.WHOP_API_KEY,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID:\n\t\t\tprocess.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: process.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_ID,\n\n\t\t// Client\n\t\tNEXT_PUBLIC_WHOP_APP_ID: process.env.NEXT_PUBLIC_WHOP_APP_ID,\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n\t\tNEXT_PUBLIC_VERCEL_URL: process.env.NEXT_PUBLIC_VERCEL_URL,\n\t},\n\textends: [vercel()],\n})\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,MAAM,IAAA,wNAAS,EAAC;IAC5B,QAAQ;QACP,cAAc,qMAAC,CAAC,MAAM;QAEtB,gBAAgB;QAChB,uCAAuC,qMAAC,CAAC,MAAM;QAC/C,kCAAkC,qMAAC,CAAC,MAAM;QAC1C,2CAA2C,qMAAC,CAAC,MAAM;QACnD,sCAAsC,qMAAC,CAAC,MAAM;IAC/C;IACA,QAAQ;QACP,yBAAyB,qMAAC,CAAC,MAAM;QACjC,gCAAgC,qMAAC,CAAC,MAAM;QACxC,6BAA6B,qMAAC,CAAC,MAAM;QACrC,wBAAwB,qMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC5C;IACA,YAAY;QACX,SAAS;QACT,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,uCAAuC,QAAQ,GAAG,CAAC,qCAAqC;QACxF,kCAAkC,QAAQ,GAAG,CAAC,gCAAgC;QAC9E,2CACC,QAAQ,GAAG,CAAC,yCAAyC;QACtD,sCAAsC,QAAQ,GAAG,CAAC,oCAAoC;QAEtF,SAAS;QACT,uBAAuB;QACvB,8BAA8B;QAC9B,2BAA2B;QAC3B,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB;IAC3D;IACA,SAAS;QAAC,IAAA,4NAAM;KAAG;AACpB","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/lib/whop.ts"],"sourcesContent":["import {\n\ttype CheckIfUserHasAccessToExperienceQuery,\n\ttype GetExperienceQuery,\n\ttype GetUserQuery,\n\tWhopServerSdk,\n} from '@whop/api'\nimport { env } from '~/env'\n\n// Type exports from Whop API queries\nexport type WhopExperience = GetExperienceQuery['experience']\nexport type WhopUser = GetUserQuery['publicUser']\nexport type WhopAccess = CheckIfUserHasAccessToExperienceQuery['hasAccessToExperience']\n\n// Initialize WhopServerSdk with app configuration\nexport const whop = WhopServerSdk({\n\tappId: env.NEXT_PUBLIC_WHOP_APP_ID,\n\tappApiKey: env.WHOP_API_KEY,\n\tonBehalfOfUserId: env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\tcompanyId: env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n})\n\n// Note: For authentication in API routes, import verifyUserToken separately:\n// import { verifyUserToken } from '@whop/api'\n// const { userId } = await verifyUserToken(req.headers)\n\n// This is for the new @whop/sdk package\n// For the time being it has some missing features and is not recommended to use\n// Oct 21, 2025\n// import Whop from '@whop/sdk'\n// export const whopClient = new Whop({\n// \tappID: env.WHOP_API_KEY,\n// \tapiKey: env.WHOP_API_KEY,\n// })\n"],"names":[],"mappings":";;;;AAAA;AAMA;;;AAQO,MAAM,OAAO,IAAA,sOAAa,EAAC;IACjC,OAAO,+JAAG,CAAC,uBAAuB;IAClC,WAAW,+JAAG,CAAC,YAAY;IAC3B,kBAAkB,+JAAG,CAAC,8BAA8B;IACpD,WAAW,+JAAG,CAAC,2BAA2B;AAC3C,GAEA,6EAA6E;CAC7E,8CAA8C;CAC9C,wDAAwD;CAExD,wCAAwC;CACxC,gFAAgF;CAChF,eAAe;CACf,+BAA+B;CAC/B,uCAAuC;CACvC,4BAA4B;CAC5B,6BAA6B;CAC7B,KAAK","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/app/%28whop-api%29/api/experience/%5BexperienceId%5D/dashboard/activity/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { db } from '~/db'\nimport { workoutPlans, workoutAssignments, inboxMessages } from '~/db/schema'\nimport { eq, desc } from 'drizzle-orm'\nimport { verifyUserToken } from '@whop/api'\nimport { whop } from '~/lib/whop'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ experienceId: string }> }\n) {\n  try {\n    const { experienceId } = await params\n    if (!experienceId)\n      return Response.json({ error: 'Missing params' }, { status: 400 })\n\n    const { userId } = await verifyUserToken(request.headers)\n    if (!userId) return Response.json({ error: 'Unauthorized' }, { status: 401 })\n\n    const access = await whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })\n    if (!access) return Response.json({ error: 'Forbidden' }, { status: 403 })\n\n    // Return mock data for now to test the endpoint\n    const mockActivities = [\n      {\n        id: '1',\n        type: 'plan_creation',\n        planTitle: 'Sample Workout Plan',\n        whopUserId: userId,\n        createdAt: new Date().toISOString(),\n      },\n      {\n        id: '2',\n        type: 'message',\n        planTitle: null,\n        whopUserId: userId,\n        createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\n        message: 'Sample message',\n      }\n    ]\n\n    return Response.json({ activities: mockActivities })\n    \n  } catch (error) {\n    console.error('Error fetching recent activity:', error)\n    return Response.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":";;;;AAIA;AAAA;AACA;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAiD;IAEzD,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM;QAC/B,IAAI,CAAC,cACH,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;QAElE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,4NAAe,EAAC,QAAQ,OAAO;QACxD,IAAI,CAAC,QAAQ,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;QAE3E,MAAM,SAAS,MAAM,wKAAI,CAAC,MAAM,CAAC,gCAAgC,CAAC;YAAE;YAAc;QAAO;QACzF,IAAI,CAAC,QAAQ,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAY,GAAG;YAAE,QAAQ;QAAI;QAExE,gDAAgD;QAChD,MAAM,iBAAiB;YACrB;gBACE,IAAI;gBACJ,MAAM;gBACN,WAAW;gBACX,YAAY;gBACZ,WAAW,IAAI,OAAO,WAAW;YACnC;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,WAAW;gBACX,YAAY;gBACZ,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,SAAS,WAAW;gBACrD,SAAS;YACX;SACD;QAED,OAAO,SAAS,IAAI,CAAC;YAAE,YAAY;QAAe;IAEpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IACzE;AACF","debugId":null}}]
}