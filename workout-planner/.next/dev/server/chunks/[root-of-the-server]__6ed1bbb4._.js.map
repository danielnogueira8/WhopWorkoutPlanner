{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/db/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, integer } from 'drizzle-orm/pg-core'\nimport { relations } from 'drizzle-orm'\n\nexport const tasks = pgTable('tasks', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\ttitle: text('title').notNull(),\n\tdescription: text('description'),\n\tcompleted: text('completed').notNull().default('false'),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\n// Workout planning schema\nexport const workoutPlans = pgTable('workout_plans', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\texperienceId: text('experience_id').notNull(), // Whop experience id (string)\n\ttitle: text('title').notNull(),\n\tdescription: text('description'),\n\tcreatedByWhopUserId: text('created_by_whop_user_id').notNull(),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const workoutPlanDays = pgTable('workout_plan_days', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\tname: text('name').notNull(), // e.g. \"Leg day\"\n\tdayIndex: integer('day_index').notNull().default(0), // ordering within plan\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const workoutExercises = pgTable('workout_exercises', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tdayId: uuid('day_id').notNull(),\n\tname: text('name').notNull(),\n\treps: integer('reps').notNull().default(0),\n\tsets: integer('sets').notNull().default(0),\n\tcurrentWeight: integer('current_weight').notNull().default(0),\n\tmaxWeight: integer('max_weight').notNull().default(0),\n\torderIndex: integer('order_index').notNull().default(0),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const workoutAssignments = pgTable('workout_assignments', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\twhopUserId: text('whop_user_id').notNull(),\n\tassignedByWhopUserId: text('assigned_by_whop_user_id').notNull(),\n\tassignedAt: timestamp('assigned_at').defaultNow().notNull(),\n})\n\n// Optional relations for convenience (not enforced FKs to keep flexibility with Supabase UUIDs)\nexport const workoutPlansRelations = relations(workoutPlans, ({ many }) => ({\n\tdays: many(workoutPlanDays),\n\tassignments: many(workoutAssignments),\n}))\n\nexport const workoutPlanDaysRelations = relations(workoutPlanDays, ({ many }) => ({\n\texercises: many(workoutExercises),\n}))\n\n// Inbox messages per experience and user conversation\nexport const inboxMessages = pgTable('inbox_messages', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\texperienceId: text('experience_id').notNull(),\n\t// Non-admin participant user id to identify the conversation\n\tconversationUserId: text('conversation_user_id').notNull(),\n\tsenderUserId: text('sender_user_id').notNull(),\n\tcontent: text('content').notNull(),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n})\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/db/index.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\nimport * as schema from './schema'\n\n// Drizzle client for type-safe queries and migrations\nconst connectionString = process.env.DATABASE_URL!\n// Supabase Postgres requires TLS in most environments\nconst client = postgres(connectionString, { ssl: 'require' })\nexport const db = drizzle(client, { schema })\n\n// Supabase client for Auth, Storage, Realtime\nexport const supabase = createClient(\n\tprocess.env.NEXT_PUBLIC_SUPABASE_URL!,\n\tprocess.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n)\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,sDAAsD;AACtD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AACjD,sDAAsD;AACtD,MAAM,SAAS,IAAA,iMAAQ,EAAC,kBAAkB;IAAE,KAAK;AAAU;AACpD,MAAM,KAAK,IAAA,mNAAO,EAAC,QAAQ;IAAE,QAAA;AAAO;AAGpC,MAAM,WAAW,IAAA,qPAAY","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/env.ts"],"sourcesContent":["import { vercel } from '@t3-oss/env-core/presets-zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\nimport z from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tWHOP_API_KEY: z.string(),\n\n\t\t// Whop Payments\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_WHOP_APP_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: z.string(),\n\t\tNEXT_PUBLIC_VERCEL_URL: z.string().default('http://localhost:3000'),\n\t},\n\truntimeEnv: {\n\t\t// Server\n\t\tWHOP_API_KEY: process.env.WHOP_API_KEY,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID:\n\t\t\tprocess.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: process.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_ID,\n\n\t\t// Client\n\t\tNEXT_PUBLIC_WHOP_APP_ID: process.env.NEXT_PUBLIC_WHOP_APP_ID,\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n\t\tNEXT_PUBLIC_VERCEL_URL: process.env.NEXT_PUBLIC_VERCEL_URL,\n\t},\n\textends: [vercel()],\n})\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,MAAM,IAAA,wNAAS,EAAC;IAC5B,QAAQ;QACP,cAAc,qMAAC,CAAC,MAAM;QAEtB,gBAAgB;QAChB,uCAAuC,qMAAC,CAAC,MAAM;QAC/C,kCAAkC,qMAAC,CAAC,MAAM;QAC1C,2CAA2C,qMAAC,CAAC,MAAM;QACnD,sCAAsC,qMAAC,CAAC,MAAM;IAC/C;IACA,QAAQ;QACP,yBAAyB,qMAAC,CAAC,MAAM;QACjC,gCAAgC,qMAAC,CAAC,MAAM;QACxC,6BAA6B,qMAAC,CAAC,MAAM;QACrC,wBAAwB,qMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC5C;IACA,YAAY;QACX,SAAS;QACT,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,uCAAuC,QAAQ,GAAG,CAAC,qCAAqC;QACxF,kCAAkC,QAAQ,GAAG,CAAC,gCAAgC;QAC9E,2CACC,QAAQ,GAAG,CAAC,yCAAyC;QACtD,sCAAsC,QAAQ,GAAG,CAAC,oCAAoC;QAEtF,SAAS;QACT,uBAAuB;QACvB,8BAA8B;QAC9B,2BAA2B;QAC3B,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB;IAC3D;IACA,SAAS;QAAC,IAAA,4NAAM;KAAG;AACpB","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/lib/whop.ts"],"sourcesContent":["import {\n\ttype CheckIfUserHasAccessToExperienceQuery,\n\ttype GetExperienceQuery,\n\ttype GetUserQuery,\n\tWhopServerSdk,\n} from '@whop/api'\nimport { env } from '~/env'\n\n// Type exports from Whop API queries\nexport type WhopExperience = GetExperienceQuery['experience']\nexport type WhopUser = GetUserQuery['publicUser']\nexport type WhopAccess = CheckIfUserHasAccessToExperienceQuery['hasAccessToExperience']\n\n// Initialize WhopServerSdk with app configuration\nexport const whop = WhopServerSdk({\n\tappId: env.NEXT_PUBLIC_WHOP_APP_ID,\n\tappApiKey: env.WHOP_API_KEY,\n\tonBehalfOfUserId: env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\tcompanyId: env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n})\n\n// Note: For authentication in API routes, import verifyUserToken separately:\n// import { verifyUserToken } from '@whop/api'\n// const { userId } = await verifyUserToken(req.headers)\n\n// This is for the new @whop/sdk package\n// For the time being it has some missing features and is not recommended to use\n// Oct 21, 2025\n// import Whop from '@whop/sdk'\n// export const whopClient = new Whop({\n// \tappID: env.WHOP_API_KEY,\n// \tapiKey: env.WHOP_API_KEY,\n// })\n"],"names":[],"mappings":";;;;AAAA;AAMA;;;AAQO,MAAM,OAAO,IAAA,sOAAa,EAAC;IACjC,OAAO,+JAAG,CAAC,uBAAuB;IAClC,WAAW,+JAAG,CAAC,YAAY;IAC3B,kBAAkB,+JAAG,CAAC,8BAA8B;IACpD,WAAW,+JAAG,CAAC,2BAA2B;AAC3C,GAEA,6EAA6E;CAC7E,8CAA8C;CAC9C,wDAAwD;CAExD,wCAAwC;CACxC,gFAAgF;CAChF,eAAe;CACf,+BAA+B;CAC/B,uCAAuC;CACvC,4BAA4B;CAC5B,6BAA6B;CAC7B,KAAK","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/app/%28whop-api%29/api/experience/%5BexperienceId%5D/dashboard/clients-needing-attention/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { db } from '~/db'\nimport { workoutPlans, workoutAssignments } from '~/db/schema'\nimport { eq, sql, notInArray } from 'drizzle-orm'\nimport { verifyUserToken } from '@whop/api'\nimport { whop } from '~/lib/whop'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ experienceId: string }> }\n) {\n  try {\n    const { experienceId } = await params\n    if (!experienceId)\n      return Response.json({ error: 'Missing params' }, { status: 400 })\n\n    const { userId } = await verifyUserToken(request.headers)\n    if (!userId) return Response.json({ error: 'Unauthorized' }, { status: 401 })\n\n    const access = await whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })\n    if (!access) return Response.json({ error: 'Forbidden' }, { status: 403 })\n\n    // Get all users who have been assigned workouts\n    const assignedUsers = await db\n      .selectDistinct({ whopUserId: workoutAssignments.whopUserId })\n      .from(workoutAssignments)\n      .innerJoin(workoutPlans, eq(workoutAssignments.planId, workoutPlans.id))\n      .where(eq(workoutPlans.experienceId, experienceId))\n\n    const assignedUserIds = assignedUsers.map(u => u.whopUserId)\n\n    // Get all members of the experience from Whop\n    const members = await whop.members.list({\n      experienceId,\n      limit: 100, // Adjust as needed\n    })\n\n    // Filter out users who already have assignments\n    const clientsNeedingAttention = members.members.filter(member => \n      !assignedUserIds.includes(member.id)\n    )\n\n    return Response.json({ \n      clientsNeedingAttention: clientsNeedingAttention.slice(0, 10), // Limit to 10 for the widget\n      totalCount: clientsNeedingAttention.length \n    })\n  } catch (error) {\n    console.error('Error fetching clients needing attention:', error)\n    return Response.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAiD;IAEzD,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM;QAC/B,IAAI,CAAC,cACH,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;QAElE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,4NAAe,EAAC,QAAQ,OAAO;QACxD,IAAI,CAAC,QAAQ,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;QAE3E,MAAM,SAAS,MAAM,wKAAI,CAAC,MAAM,CAAC,gCAAgC,CAAC;YAAE;YAAc;QAAO;QACzF,IAAI,CAAC,QAAQ,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAY,GAAG;YAAE,QAAQ;QAAI;QAExE,gDAAgD;QAChD,MAAM,gBAAgB,MAAM,sKAAE,CAC3B,cAAc,CAAC;YAAE,YAAY,uLAAkB,CAAC,UAAU;QAAC,GAC3D,IAAI,CAAC,uLAAkB,EACvB,SAAS,CAAC,iLAAY,EAAE,IAAA,sNAAE,EAAC,uLAAkB,CAAC,MAAM,EAAE,iLAAY,CAAC,EAAE,GACrE,KAAK,CAAC,IAAA,sNAAE,EAAC,iLAAY,CAAC,YAAY,EAAE;QAEvC,MAAM,kBAAkB,cAAc,GAAG,CAAC,CAAA,IAAK,EAAE,UAAU;QAE3D,8CAA8C;QAC9C,MAAM,UAAU,MAAM,wKAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YACtC;YACA,OAAO;QACT;QAEA,gDAAgD;QAChD,MAAM,0BAA0B,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAA,SACrD,CAAC,gBAAgB,QAAQ,CAAC,OAAO,EAAE;QAGrC,OAAO,SAAS,IAAI,CAAC;YACnB,yBAAyB,wBAAwB,KAAK,CAAC,GAAG;YAC1D,YAAY,wBAAwB,MAAM;QAC5C;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IACzE;AACF","debugId":null}}]
}