{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/db/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, integer } from 'drizzle-orm/pg-core'\nimport { relations } from 'drizzle-orm'\n\nexport const tasks = pgTable('tasks', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\ttitle: text('title').notNull(),\n\tdescription: text('description'),\n\tcompleted: text('completed').notNull().default('false'),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\n// Workout planning schema\nexport const workoutPlans = pgTable('workout_plans', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\texperienceId: text('experience_id').notNull(), // Whop experience id (string)\n\ttitle: text('title').notNull(),\n\tdescription: text('description'),\n\tcreatedByWhopUserId: text('created_by_whop_user_id').notNull(),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const workoutPlanDays = pgTable('workout_plan_days', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\tname: text('name').notNull(), // e.g. \"Leg day\"\n\tdayIndex: integer('day_index').notNull().default(0), // ordering within plan\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const workoutExercises = pgTable('workout_exercises', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tdayId: uuid('day_id').notNull(),\n\tname: text('name').notNull(),\n\treps: integer('reps').notNull().default(0),\n\tsets: integer('sets').notNull().default(0),\n\tcurrentWeight: integer('current_weight').notNull().default(0),\n\tmaxWeight: integer('max_weight').notNull().default(0),\n\torderIndex: integer('order_index').notNull().default(0),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const workoutAssignments = pgTable('workout_assignments', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\twhopUserId: text('whop_user_id').notNull(),\n\tassignedByWhopUserId: text('assigned_by_whop_user_id').notNull(),\n\tassignedAt: timestamp('assigned_at').defaultNow().notNull(),\n\tcompletedAt: timestamp('completed_at'), // When the entire plan was completed\n})\n\n// Workout session logs - tracks individual workout sessions\nexport const workoutSessions = pgTable('workout_sessions', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\tdayId: uuid('day_id').notNull(),\n\twhopUserId: text('whop_user_id').notNull(),\n\tstartedAt: timestamp('started_at').defaultNow().notNull(),\n\tcompletedAt: timestamp('completed_at'),\n\tnotes: text('notes'),\n})\n\n// Exercise logs - tracks individual exercise performance in a session\nexport const exerciseLogs = pgTable('exercise_logs', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tsessionId: uuid('session_id').notNull(),\n\texerciseId: uuid('exercise_id').notNull(),\n\tsets: integer('sets').notNull().default(0),\n\treps: integer('reps').notNull().default(0),\n\tweight: integer('weight').notNull().default(0),\n\tnotes: text('notes'),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n})\n\n// Optional relations for convenience (not enforced FKs to keep flexibility with Supabase UUIDs)\nexport const workoutPlansRelations = relations(workoutPlans, ({ many }) => ({\n\tdays: many(workoutPlanDays),\n\tassignments: many(workoutAssignments),\n\tsessions: many(workoutSessions),\n}))\n\nexport const workoutPlanDaysRelations = relations(workoutPlanDays, ({ many }) => ({\n\texercises: many(workoutExercises),\n\tsessions: many(workoutSessions),\n}))\n\nexport const workoutSessionsRelations = relations(workoutSessions, ({ many }) => ({\n\texerciseLogs: many(exerciseLogs),\n}))\n\n// Inbox messages per experience and user conversation\nexport const inboxMessages = pgTable('inbox_messages', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\texperienceId: text('experience_id').notNull(),\n\t// Non-admin participant user id to identify the conversation\n\tconversationUserId: text('conversation_user_id').notNull(),\n\tsenderUserId: text('sender_user_id').notNull(),\n\tcontent: text('content').notNull(),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n})\n\n// Nutrition planning schema\nexport const nutritionPlans = pgTable('nutrition_plans', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\texperienceId: text('experience_id').notNull(), // Whop experience id (string)\n\ttitle: text('title').notNull(),\n\tdescription: text('description'),\n\tcreatedByWhopUserId: text('created_by_whop_user_id').notNull(),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const nutritionPlanDays = pgTable('nutrition_plan_days', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\tname: text('name').notNull(), // e.g. \"Monday\", \"Day 1\"\n\tdayIndex: integer('day_index').notNull().default(0), // ordering within plan\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const nutritionMeals = pgTable('nutrition_meals', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tdayId: uuid('day_id').notNull(),\n\tname: text('name').notNull(), // e.g. \"Breakfast\", \"Lunch\"\n\tdescription: text('description'),\n\tcalories: integer('calories').notNull().default(0),\n\tprotein: integer('protein').notNull().default(0), // in grams\n\tcarbs: integer('carbs').notNull().default(0), // in grams\n\tfats: integer('fats').notNull().default(0), // in grams\n\torderIndex: integer('order_index').notNull().default(0),\n\tcreatedAt: timestamp('created_at').defaultNow().notNull(),\n\tupdatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const nutritionAssignments = pgTable('nutrition_assignments', {\n\tid: uuid('id').defaultRandom().primaryKey(),\n\tplanId: uuid('plan_id').notNull(),\n\twhopUserId: text('whop_user_id').notNull(),\n\tassignedByWhopUserId: text('assigned_by_whop_user_id').notNull(),\n\tassignedAt: timestamp('assigned_at').defaultNow().notNull(),\n\tcompletedAt: timestamp('completed_at'), // When the entire plan was completed\n})\n\n// Nutrition relations\nexport const nutritionPlansRelations = relations(nutritionPlans, ({ many }) => ({\n\tdays: many(nutritionPlanDays),\n\tassignments: many(nutritionAssignments),\n}))\n\nexport const nutritionPlanDaysRelations = relations(nutritionPlanDays, ({ many }) => ({\n\tmeals: many(nutritionMeals),\n}))\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/db/index.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\nimport * as schema from './schema'\n\n// Drizzle client for type-safe queries and migrations\nconst connectionString = process.env.DATABASE_URL!\n// Supabase Postgres requires TLS in most environments\nconst client = postgres(connectionString, { ssl: 'require' })\nexport const db = drizzle(client, { schema })\n\n// Supabase client for Auth, Storage, Realtime\nexport const supabase = createClient(\n\tprocess.env.NEXT_PUBLIC_SUPABASE_URL!,\n\tprocess.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n)\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,sDAAsD;AACtD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AACjD,sDAAsD;AACtD,MAAM,SAAS,IAAA,iMAAQ,EAAC,kBAAkB;IAAE,KAAK;AAAU;AACpD,MAAM,KAAK,IAAA,mNAAO,EAAC,QAAQ;IAAE,QAAA;AAAO;AAGpC,MAAM,WAAW,IAAA,qPAAY","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/env.ts"],"sourcesContent":["import { vercel } from '@t3-oss/env-core/presets-zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\nimport z from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tWHOP_API_KEY: z.string(),\n\n\t\t// Whop Payments\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID: z.string(),\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: z.string(),\n\t},\n\tclient: {\n\t\tNEXT_PUBLIC_WHOP_APP_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: z.string(),\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: z.string(),\n\t\tNEXT_PUBLIC_VERCEL_URL: z.string().default('http://localhost:3000'),\n\t},\n\truntimeEnv: {\n\t\t// Server\n\t\tWHOP_API_KEY: process.env.WHOP_API_KEY,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tONE_TIME_PURCHASE_ACCESS_PASS_ID: process.env.ONE_TIME_PURCHASE_ACCESS_PASS_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID:\n\t\t\tprocess.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_PLAN_ID,\n\t\tSUBSCRIPTION_PURCHASE_ACCESS_PASS_ID: process.env.SUBSCRIPTION_PURCHASE_ACCESS_PASS_ID,\n\n\t\t// Client\n\t\tNEXT_PUBLIC_WHOP_APP_ID: process.env.NEXT_PUBLIC_WHOP_APP_ID,\n\t\tNEXT_PUBLIC_WHOP_AGENT_USER_ID: process.env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\t\tNEXT_PUBLIC_WHOP_COMPANY_ID: process.env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n\t\tNEXT_PUBLIC_VERCEL_URL: process.env.NEXT_PUBLIC_VERCEL_URL,\n\t},\n\textends: [vercel()],\n})\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,MAAM,IAAA,wNAAS,EAAC;IAC5B,QAAQ;QACP,cAAc,qMAAC,CAAC,MAAM;QAEtB,gBAAgB;QAChB,uCAAuC,qMAAC,CAAC,MAAM;QAC/C,kCAAkC,qMAAC,CAAC,MAAM;QAC1C,2CAA2C,qMAAC,CAAC,MAAM;QACnD,sCAAsC,qMAAC,CAAC,MAAM;IAC/C;IACA,QAAQ;QACP,yBAAyB,qMAAC,CAAC,MAAM;QACjC,gCAAgC,qMAAC,CAAC,MAAM;QACxC,6BAA6B,qMAAC,CAAC,MAAM;QACrC,wBAAwB,qMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC5C;IACA,YAAY;QACX,SAAS;QACT,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,uCAAuC,QAAQ,GAAG,CAAC,qCAAqC;QACxF,kCAAkC,QAAQ,GAAG,CAAC,gCAAgC;QAC9E,2CACC,QAAQ,GAAG,CAAC,yCAAyC;QACtD,sCAAsC,QAAQ,GAAG,CAAC,oCAAoC;QAEtF,SAAS;QACT,uBAAuB;QACvB,8BAA8B;QAC9B,2BAA2B;QAC3B,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB;IAC3D;IACA,SAAS;QAAC,IAAA,4NAAM;KAAG;AACpB","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/lib/whop.ts"],"sourcesContent":["import {\n\ttype CheckIfUserHasAccessToExperienceQuery,\n\ttype GetExperienceQuery,\n\ttype GetUserQuery,\n\tWhopServerSdk,\n} from '@whop/api'\nimport { env } from '~/env'\n\n// Type exports from Whop API queries\nexport type WhopExperience = GetExperienceQuery['experience']\nexport type WhopUser = GetUserQuery['publicUser']\nexport type WhopAccess = CheckIfUserHasAccessToExperienceQuery['hasAccessToExperience']\n\n// Initialize WhopServerSdk with app configuration\nexport const whop = WhopServerSdk({\n\tappId: env.NEXT_PUBLIC_WHOP_APP_ID,\n\tappApiKey: env.WHOP_API_KEY,\n\tonBehalfOfUserId: env.NEXT_PUBLIC_WHOP_AGENT_USER_ID,\n\tcompanyId: env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n})\n\n// Note: For authentication in API routes, import verifyUserToken separately:\n// import { verifyUserToken } from '@whop/api'\n// const { userId } = await verifyUserToken(req.headers)\n\n// This is for the new @whop/sdk package\n// For the time being it has some missing features and is not recommended to use\n// Oct 21, 2025\n// import Whop from '@whop/sdk'\n// export const whopClient = new Whop({\n// \tappID: env.WHOP_API_KEY,\n// \tapiKey: env.WHOP_API_KEY,\n// })\n"],"names":[],"mappings":";;;;AAAA;AAMA;;;AAQO,MAAM,OAAO,IAAA,sOAAa,EAAC;IACjC,OAAO,+JAAG,CAAC,uBAAuB;IAClC,WAAW,+JAAG,CAAC,YAAY;IAC3B,kBAAkB,+JAAG,CAAC,8BAA8B;IACpD,WAAW,+JAAG,CAAC,2BAA2B;AAC3C,GAEA,6EAA6E;CAC7E,8CAA8C;CAC9C,wDAAwD;CAExD,wCAAwC;CACxC,gFAAgF;CAChF,eAAe;CACf,+BAA+B;CAC/B,uCAAuC;CACvC,4BAA4B;CAC5B,6BAA6B;CAC7B,KAAK","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielnogueira/whopWorkoutPlanner/workout-planner/src/app/%28whop-api%29/api/experience/%5BexperienceId%5D/dashboard/activity/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { db } from '~/db'\nimport { workoutPlans, workoutAssignments, inboxMessages } from '~/db/schema'\nimport { eq, desc } from 'drizzle-orm'\nimport { verifyUserToken } from '@whop/api'\nimport { whop } from '~/lib/whop'\nimport { env } from '~/env'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ experienceId: string }> }\n) {\n  try {\n    const { experienceId } = await params\n    if (!experienceId)\n      return Response.json({ error: 'Missing params' }, { status: 400 })\n\n    const { userId } = await verifyUserToken(request.headers)\n    if (!userId) return Response.json({ error: 'Unauthorized' }, { status: 401 })\n\n    const access = await whop.access.checkIfUserHasAccessToExperience({ experienceId, userId })\n    if (!access) return Response.json({ error: 'Forbidden' }, { status: 403 })\n\n    // Get recent workout plan creations - very simple query\n    let planCreations = []\n    try {\n      const plans = await db\n        .select({\n          id: workoutPlans.id,\n          title: workoutPlans.title,\n          createdByWhopUserId: workoutPlans.createdByWhopUserId,\n          createdAt: workoutPlans.createdAt,\n        })\n        .from(workoutPlans)\n        .where(eq(workoutPlans.experienceId, experienceId))\n        .orderBy(desc(workoutPlans.createdAt))\n        .limit(3)\n      \n      planCreations = plans.map(plan => ({\n        id: plan.id,\n        type: 'plan_creation',\n        planTitle: plan.title,\n        whopUserId: plan.createdByWhopUserId,\n        createdAt: plan.createdAt,\n      }))\n    } catch (error) {\n      console.error('Error fetching plan creations:', error)\n    }\n\n    // Get recent inbox messages - very simple query\n    let messages = []\n    try {\n      const inboxData = await db\n        .select({\n          id: inboxMessages.id,\n          senderUserId: inboxMessages.senderUserId,\n          content: inboxMessages.content,\n          createdAt: inboxMessages.createdAt,\n        })\n        .from(inboxMessages)\n        .where(eq(inboxMessages.experienceId, experienceId))\n        .orderBy(desc(inboxMessages.createdAt))\n        .limit(3)\n      \n      // Fetch user details for message senders using the correct Whop API method\n      const senderUserIds = inboxData.map(msg => msg.senderUserId)\n      const userDetails = new Map()\n      \n      if (senderUserIds.length > 0) {\n        try {\n          // Get all company members and create a lookup map\n          const members = await whop.companies.listMembers({\n            companyId: env.NEXT_PUBLIC_WHOP_COMPANY_ID,\n          })\n          \n          const nodes = members?.members?.nodes ?? []\n          nodes.forEach((m: any) => {\n            if (m?.user && senderUserIds.includes(m.user.id)) {\n              userDetails.set(m.user.id, {\n                name: m.user.name || m.user.username || 'Unknown User',\n                username: m.user.username || 'unknown'\n              })\n            }\n          })\n          \n          // Set fallback for any users not found in the company members\n          senderUserIds.forEach(userId => {\n            if (!userDetails.has(userId)) {\n              userDetails.set(userId, {\n                name: `User ${userId.slice(-4)}`, // Show last 4 chars of user ID\n                username: `user_${userId.slice(-4)}`\n              })\n            }\n          })\n        } catch (error) {\n          console.error('Error fetching user details:', error)\n          // Set fallback for all users if the API call fails\n          senderUserIds.forEach(userId => {\n            userDetails.set(userId, {\n              name: `User ${userId.slice(-4)}`,\n              username: `user_${userId.slice(-4)}`\n            })\n          })\n        }\n      }\n      \n      messages = inboxData.map(msg => {\n        const userInfo = userDetails.get(msg.senderUserId)\n        return {\n          id: msg.id,\n          type: 'message',\n          planTitle: null,\n          whopUserId: msg.senderUserId,\n          createdAt: msg.createdAt,\n          message: msg.content,\n          senderName: userInfo?.name || 'Unknown User',\n          senderUsername: userInfo?.username || 'unknown'\n        }\n      })\n    } catch (error) {\n      console.error('Error fetching messages:', error)\n    }\n\n    // Combine activities\n    const activities = [...planCreations, ...messages]\n\n    // Sort by date\n    activities.sort((a, b) => {\n      const dateA = new Date(a.createdAt).getTime()\n      const dateB = new Date(b.createdAt).getTime()\n      return dateB - dateA\n    })\n\n    return Response.json({ activities })\n    \n  } catch (error) {\n    console.error('Error fetching recent activity:', error)\n    return Response.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}